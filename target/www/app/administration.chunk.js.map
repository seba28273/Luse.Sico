{"version":3,"file":"app/administration.chunk.js","sources":["webpack:///./src/main/webapp/app/modules/administration/audits/audits.tsx","webpack:///./src/main/webapp/app/modules/administration/configuration/configuration.tsx","webpack:///./src/main/webapp/app/modules/administration/docs/docs.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health.tsx","webpack:///./src/main/webapp/app/modules/administration/index.tsx","webpack:///./src/main/webapp/app/modules/administration/logs/logs.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/index.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management.tsx"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\nimport { Input, Row, Table } from 'reactstrap';\nimport { Translate, TextFormat, JhiPagination, getPaginationItemsNumber, getSortState, IPaginationBaseState } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_TIMESTAMP_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { getAudits } from '../administration.reducer';\n\nexport interface IAuditsPageProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\n\nexport interface IAuditsPageState extends IPaginationBaseState {\n  fromDate: string;\n  toDate: string;\n}\n\nconst previousMonth = (): string => {\n  const now: Date = new Date();\n  const fromDate =\n    now.getMonth() === 0\n      ? new Date(now.getFullYear() - 1, 11, now.getDate())\n      : new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n  return fromDate.toISOString().slice(0, 10);\n};\n\nconst today = (): string => {\n  // Today + 1 day - needed if the current day must be included\n  const day: Date = new Date();\n  day.setDate(day.getDate() + 1);\n  const toDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n  return toDate.toISOString().slice(0, 10);\n};\n\nexport class AuditsPage extends React.Component<IAuditsPageProps, IAuditsPageState> {\n  state: IAuditsPageState = {\n    ...getSortState(this.props.location, ITEMS_PER_PAGE),\n    fromDate: previousMonth(),\n    toDate: today()\n  };\n\n  componentDidMount() {\n    this.getAudits();\n  }\n\n  onChangeFromDate = evt => {\n    this.setState(\n      {\n        fromDate: evt.target.value\n      },\n      () => this.getAudits()\n    );\n  };\n  onChangeToDate = evt => {\n    this.setState(\n      {\n        toDate: evt.target.value\n      },\n      () => this.getAudits()\n    );\n  };\n\n  sort = prop => () => {\n    this.setState(\n      {\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\n        sort: prop\n      },\n      () => this.transition()\n    );\n  };\n\n  transition = () => {\n    this.getAudits();\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\n  };\n\n  handlePagination = activePage => this.setState({ activePage }, () => this.transition());\n\n  getAudits = () => {\n    const { activePage, itemsPerPage, sort, order, fromDate, toDate } = this.state;\n    this.props.getAudits(activePage - 1, itemsPerPage, `${sort},${order}`, fromDate, toDate);\n  };\n\n  render() {\n    const { audits, totalItems } = this.props;\n    const { fromDate, toDate } = this.state;\n    return (\n      <div>\n        <h2 id=\"audits-page-heading\">Audits</h2>\n        <span>\n          <Translate contentKey=\"audits.filter.from\">from</Translate>\n        </span>\n        <Input type=\"date\" value={fromDate} onChange={this.onChangeFromDate} name=\"fromDate\" id=\"fromDate\" />\n        <span>\n          <Translate contentKey=\"audits.filter.to\">to</Translate>\n        </span>\n        <Input type=\"date\" value={toDate} onChange={this.onChangeToDate} name=\"toDate\" id=\"toDate\" />\n        <Table striped responsive>\n          <thead>\n            <tr>\n              <th onClick={this.sort('auditEventDate')}>\n                <Translate contentKey=\"audits.table.header.date\">Date</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th onClick={this.sort('principal')}>\n                <Translate contentKey=\"audits.table.header.principal\">User</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th onClick={this.sort('auditEventType')}>\n                <Translate contentKey=\"audits.table.header.status\">State</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th>\n                <Translate contentKey=\"audits.table.header.data\">Extra data</Translate>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {audits.map((audit, i) => (\n              <tr key={`audit-${i}`}>\n                <td>{<TextFormat value={audit.timestamp} type=\"date\" format={APP_TIMESTAMP_FORMAT} />}</td>\n                <td>{audit.principal}</td>\n                <td>{audit.type}</td>\n                <td>\n                  {audit.data ? audit.data.message : null}\n                  {audit.data ? audit.data.remoteAddress : null}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\n            activePage={this.state.activePage}\n            onSelect={this.handlePagination}\n            maxButtons={5}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  audits: storeState.administration.audits,\n  totalItems: storeState.administration.totalItems\n});\n\nconst mapDispatchToProps = { getAudits };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AuditsPage);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Input, Row, Col, Badge } from 'reactstrap';\nimport { Translate } from 'react-jhipster';\n\nimport { getConfigurations, getEnv } from '../administration.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IConfigurationPageProps extends StateProps, DispatchProps {}\n\nexport interface IConfigurationPageState {\n  filter: string;\n  reversePrefix: boolean;\n  reverseProperties: boolean;\n}\n\nexport class ConfigurationPage extends React.Component<IConfigurationPageProps, IConfigurationPageState> {\n  state: IConfigurationPageState = {\n    filter: '',\n    reversePrefix: false,\n    reverseProperties: false\n  };\n\n  componentDidMount() {\n    this.props.getConfigurations();\n    this.props.getEnv();\n  }\n\n  setFilter = evt => {\n    this.setState({\n      filter: evt.target.value\n    });\n  };\n\n  envFilterFn = configProp => configProp.toUpperCase().includes(this.state.filter.toUpperCase());\n  propsFilterFn = configProp => configProp.prefix.toUpperCase().includes(this.state.filter.toUpperCase());\n\n  reversePrefix = () => {\n    this.setState({\n      reversePrefix: !this.state.reversePrefix\n    });\n  };\n\n  reverseProperties = () => {\n    this.setState({\n      reverseProperties: !this.state.reverseProperties\n    });\n  };\n\n  getContextList = contexts =>\n    Object.values(contexts)\n      .map((v: any) => v.beans)\n      .reduce((acc, e) => ({ ...acc, ...e }));\n\n  render() {\n    const { configuration } = this.props;\n    const { filter } = this.state;\n    const configProps = configuration && configuration.configProps ? configuration.configProps : {};\n    const env = configuration && configuration.env ? configuration.env : {};\n    return (\n      <div>\n        <h2 id=\"configuration-page-heading\">\n          <Translate contentKey=\"configuration.title\">Configuration</Translate>\n        </h2>\n        <span>\n          <Translate contentKey=\"configuration.filter\">Filter</Translate>\n        </span>{' '}\n        <Input type=\"search\" value={filter} onChange={this.setFilter} name=\"search\" id=\"search\" />\n        <label>Spring configuration</label>\n        <Table className=\"table table-striped table-bordered table-responsive d-table\">\n          <thead>\n            <tr>\n              <th onClick={this.reversePrefix}>\n                <Translate contentKey=\"configuration.table.prefix\">Prefix</Translate>\n              </th>\n              <th onClick={this.reverseProperties}>\n                <Translate contentKey=\"configuration.table.properties\">Properties</Translate>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {configProps.contexts\n              ? Object.values(this.getContextList(configProps.contexts))\n                  .filter(this.propsFilterFn)\n                  .map((property, propIndex) => (\n                    <tr key={propIndex}>\n                      <td>{property['prefix']}</td>\n                      <td>\n                        {Object.keys(property['properties']).map((propKey, index) => (\n                          <Row key={index}>\n                            <Col md=\"4\">{propKey}</Col>\n                            <Col md=\"8\">\n                              <Badge className=\"float-right badge-secondary break\">{JSON.stringify(property['properties'][propKey])}</Badge>\n                            </Col>\n                          </Row>\n                        ))}\n                      </td>\n                    </tr>\n                  ))\n              : null}\n          </tbody>\n        </Table>\n        {env.propertySources\n          ? env.propertySources.map((envKey, envIndex) => (\n              <div key={envIndex}>\n                <h4>\n                  <span>{envKey.name}</span>\n                </h4>\n                <Table className=\"table table-sm table-striped table-bordered table-responsive d-table\">\n                  <thead>\n                    <tr key={envIndex}>\n                      <th className=\"w-40\">Property</th>\n                      <th className=\"w-60\">Value</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Object.keys(envKey.properties)\n                      .filter(this.envFilterFn)\n                      .map((propKey, propIndex) => (\n                        <tr key={propIndex}>\n                          <td className=\"break\">{propKey}</td>\n                          <td className=\"break\">\n                            <span className=\"float-right badge badge-secondary break\">{envKey.properties[propKey].value}</span>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n              </div>\n            ))\n          : null}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ administration }: IRootState) => ({\n  configuration: administration.configuration,\n  isFetching: administration.loading\n});\n\nconst mapDispatchToProps = { getConfigurations, getEnv };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConfigurationPage);\n","import React from 'react';\n\nconst DocsPage = () => (\n  <div>\n    <iframe src=\"../swagger-ui/index.html\" width=\"100%\" height=\"800\" title=\"Swagger UI\" seamless style={{ border: 'none' }} />\n  </div>\n);\n\nexport default DocsPage;\n","import React from 'react';\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nconst formatDiskSpaceOutput = rawValue => {\n  // Should display storage space in an human readable unit\n  const val = rawValue / 1073741824;\n  if (val > 1) {\n    // Value\n    return val.toFixed(2) + ' GB';\n  } else {\n    return (rawValue / 1048576).toFixed(2) + ' MB';\n  }\n};\n\nconst HealthModal = ({ handleClose, healthObject, showModal }) => {\n  const data = healthObject.details || {};\n  return (\n    <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }} toggle={handleClose}>\n      <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\n      <ModalBody>\n        <Table bordered>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(data).map((key, index) => (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{healthObject.name === 'diskSpace' ? formatDiskSpaceOutput(data[key]) : JSON.stringify(data[key])}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default HealthModal;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { systemHealth } from '../administration.reducer';\nimport HealthModal from './health-modal';\n\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\n\nexport interface IHealthPageState {\n  healthObject: any;\n  showModal: boolean;\n}\n\nexport class HealthPage extends React.Component<IHealthPageProps, IHealthPageState> {\n  state: IHealthPageState = {\n    healthObject: {},\n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.systemHealth();\n  }\n\n  getSystemHealth = () => {\n    if (!this.props.isFetching) {\n      this.props.systemHealth();\n    }\n  };\n\n  getSystemHealthInfo = (name, healthObject) => () => {\n    this.setState({\n      showModal: true,\n      healthObject: {\n        ...healthObject,\n        name\n      }\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      showModal: false\n    });\n  };\n\n  renderModal = () => {\n    const { healthObject } = this.state;\n    return <HealthModal healthObject={healthObject} handleClose={this.handleClose} showModal={this.state.showModal} />;\n  };\n\n  render() {\n    const { health, isFetching } = this.props;\n    const data = (health || {}).details || {};\n    return (\n      <div>\n        <h2 id=\"health-page-heading\">Health Checks</h2>\n        <p>\n          <Button onClick={this.getSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n            <FontAwesomeIcon icon=\"sync\" />\n            &nbsp;\n            <Translate component=\"span\" contentKey=\"health.refresh.button\">\n              Refresh\n            </Translate>\n          </Button>\n        </p>\n        <Row>\n          <Col md=\"12\">\n            <Table bordered>\n              <thead>\n                <tr>\n                  <th>Service Name</th>\n                  <th>Status</th>\n                  <th>Details</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(data).map(\n                  (configPropKey, configPropIndex) =>\n                    configPropKey !== 'status' ? (\n                      <tr key={configPropIndex}>\n                        <td>{configPropKey}</td>\n                        <td>\n                          <Badge color={data[configPropKey].status !== 'UP' ? 'danger' : 'success'}>{data[configPropKey].status}</Badge>\n                        </td>\n                        <td>\n                          {data[configPropKey].details ? (\n                            <a onClick={this.getSystemHealthInfo(configPropKey, data[configPropKey])}>\n                              <FontAwesomeIcon icon=\"eye\" />\n                            </a>\n                          ) : null}\n                        </td>\n                      </tr>\n                    ) : null\n                )}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  health: storeState.administration.health,\n  isFetching: storeState.administration.loading\n});\n\nconst mapDispatchToProps = { systemHealth };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HealthPage);\n","import React from 'react';\n\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\nimport UserManagement from './user-management';\nimport Logs from './logs/logs';\nimport Health from './health/health';\nimport Metrics from './metrics/metrics';\nimport Configuration from './configuration/configuration';\nimport Audits from './audits/audits';\nimport Docs from './docs/docs';\n\nconst Routes = ({ match }) => (\n  <div>\n    <ErrorBoundaryRoute path={`${match.url}/user-management`} component={UserManagement} />\n    <ErrorBoundaryRoute exact path={`${match.url}/health`} component={Health} />\n    <ErrorBoundaryRoute exact path={`${match.url}/metrics`} component={Metrics} />\n    <ErrorBoundaryRoute exact path={`${match.url}/docs`} component={Docs} />\n    <ErrorBoundaryRoute exact path={`${match.url}/configuration`} component={Configuration} />\n    <ErrorBoundaryRoute exact path={`${match.url}/audits`} component={Audits} />\n    <ErrorBoundaryRoute exact path={`${match.url}/logs`} component={Logs} />\n  </div>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\n\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface ILogsPageProps extends StateProps, DispatchProps {}\n\nexport interface ILogsPageState {\n  filter: string;\n}\n\nexport class LogsPage extends React.Component<ILogsPageProps, ILogsPageState> {\n  state: ILogsPageState = {\n    filter: ''\n  };\n\n  componentDidMount() {\n    this.props.getLoggers();\n  }\n\n  getLogs = () => {\n    if (!this.props.isFetching) {\n      this.props.getLoggers();\n    }\n  };\n\n  changeLevel = (loggerName, level) => () => {\n    this.props.changeLogLevel(loggerName, level);\n  };\n\n  setFilter = evt => {\n    this.setState({\n      filter: evt.target.value\n    });\n  };\n\n  getClassName = (level, check, className) => (level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light');\n\n  filterFn = l => l.name.toUpperCase().includes(this.state.filter.toUpperCase());\n\n  render() {\n    const { logs, isFetching } = this.props;\n    const { filter } = this.state;\n    const loggers = logs ? logs.loggers : [];\n    return (\n      <div>\n        <h2 id=\"logs-page-heading\">\n          <Translate contentKey=\"logs.title\">Logs</Translate>\n        </h2>\n        <p>\n          <Translate contentKey=\"logs.nbloggers\" interpolate={{ total: loggers.length }}>\n            There are {loggers.length.toString()} loggers.\n          </Translate>\n        </p>\n\n        <span>\n          <Translate contentKey=\"logs.filter\">Filter</Translate>\n        </span>\n        <input type=\"text\" value={filter} onChange={this.setFilter} className=\"form-control\" disabled={isFetching} />\n\n        <table className=\"table table-sm table-striped table-bordered\">\n          <thead>\n            <tr title=\"click to order\">\n              <th>\n                <span>\n                  <Translate contentKey=\"logs.table.name\">Name</Translate>\n                </span>\n              </th>\n              <th>\n                <span>\n                  <Translate contentKey=\"logs.table.level\">Level</Translate>\n                </span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {loggers.filter(this.filterFn).map((logger, i) => (\n              <tr key={`log-row-${i}`}>\n                <td>\n                  <small>{logger.name}</small>\n                </td>\n                <td>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'TRACE')}\n                    className={this.getClassName(logger.level, 'TRACE', 'primary')}\n                  >\n                    TRACE\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'DEBUG')}\n                    className={this.getClassName(logger.level, 'DEBUG', 'success')}\n                  >\n                    DEBUG\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'INFO')}\n                    className={this.getClassName(logger.level, 'INFO', 'info')}\n                  >\n                    INFO\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'WARN')}\n                    className={this.getClassName(logger.level, 'WARN', 'warning')}\n                  >\n                    WARN\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'ERROR')}\n                    className={this.getClassName(logger.level, 'ERROR', 'danger')}\n                  >\n                    ERROR\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'OFF')}\n                    className={this.getClassName(logger.level, 'OFF', 'secondary')}\n                  >\n                    OFF\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ administration }: IRootState) => ({\n  logs: administration.logs,\n  isFetching: administration.loading\n});\n\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LogsPage);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Progress, Row, Table } from 'reactstrap';\nimport {\n  CacheMetrics,\n  DatasourceMetrics,\n  GarbageCollectorMetrics,\n  HttpRequestMetrics,\n  JvmMemory,\n  JvmThreads,\n  EndpointsRequestsMetrics,\n  SystemMetrics,\n  Translate\n} from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_TIMESTAMP_FORMAT, APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT, APP_WHOLE_NUMBER_FORMAT } from 'app/config/constants';\nimport { systemMetrics, systemThreadDump } from '../administration.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IMetricsPageProps extends StateProps, DispatchProps {}\n\nexport interface IMetricsPageState {\n  showModal: boolean;\n}\n\nexport class MetricsPage extends React.Component<IMetricsPageProps, IMetricsPageState> {\n  state: IMetricsPageState = {\n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.systemMetrics();\n    this.props.systemThreadDump();\n  }\n\n  getMetrics = () => {\n    if (!this.props.isFetching) {\n      this.props.systemMetrics();\n      this.props.systemThreadDump();\n    }\n  };\n\n  render() {\n    const { metrics, threadDump, isFetching } = this.props;\n    return (\n      <div>\n        <h2 id=\"metrics-page-heading\">Application Metrics</h2>\n        <p>\n          <Button onClick={this.getMetrics} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n            <FontAwesomeIcon icon=\"sync\" />\n            &nbsp;\n            <Translate component=\"span\" contentKey=\"health.refresh.button\">\n              Refresh\n            </Translate>\n          </Button>\n        </p>\n        <hr />\n\n        <Row>\n          <Col sm=\"12\">\n            <h3>JVM Metrics</h3>\n            <Row>\n              <Col md=\"4\">\n                {metrics && metrics.jvm ? <JvmMemory jvmMetrics={metrics.jvm} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} /> : ''}\n              </Col>\n              <Col md=\"4\">{threadDump ? <JvmThreads jvmThreads={threadDump} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} /> : ''}</Col>\n              <Col md=\"4\">\n                {metrics && metrics.processMetrics ? (\n                  <SystemMetrics\n                    systemMetrics={metrics.processMetrics}\n                    wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\n                    timestampFormat={APP_TIMESTAMP_FORMAT}\n                  />\n                ) : (\n                  ''\n                )}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n\n        {metrics && metrics.garbageCollector ? (\n          <GarbageCollectorMetrics garbageCollectorMetrics={metrics.garbageCollector} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} />\n        ) : (\n          ''\n        )}\n        {metrics && metrics['http.server.requests'] ? (\n          <HttpRequestMetrics\n            requestMetrics={metrics['http.server.requests']}\n            twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n            wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\n          />\n        ) : (\n          ''\n        )}\n        {metrics && metrics.endpointsRequests ? (\n          <EndpointsRequestsMetrics endpointsRequestsMetrics={metrics.endpointsRequests} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} />\n        ) : (\n          ''\n        )}\n\n        {metrics.cache ? (\n          <Row>\n            <Col sm=\"12\">\n              <CacheMetrics cacheMetrics={metrics.cache} twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n            </Col>\n          </Row>\n        ) : (\n          ''\n        )}\n\n        {metrics.databases && JSON.stringify(metrics.databases) !== '{}' ? (\n          <Row>\n            <Col sm=\"12\">\n              <DatasourceMetrics\n                datasourceMetrics={metrics.databases}\n                twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n              />\n            </Col>\n          </Row>\n        ) : (\n          ''\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  metrics: storeState.administration.metrics,\n  isFetching: storeState.administration.loading,\n  threadDump: storeState.administration.threadDump\n});\n\nconst mapDispatchToProps = { systemMetrics, systemThreadDump };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MetricsPage);\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\n\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\nimport UserManagement from './user-management';\nimport UserManagementDetail from './user-management-detail';\nimport UserManagementUpdate from './user-management-update';\nimport UserManagementDeleteDialog from './user-management-delete-dialog';\n\nconst Routes = ({ match }) => (\n  <>\n    <Switch>\n      <ErrorBoundaryRoute exact path={`${match.url}/new`} component={UserManagementUpdate} />\n      <ErrorBoundaryRoute exact path={`${match.url}/:login/edit`} component={UserManagementUpdate} />\n      <ErrorBoundaryRoute exact path={`${match.url}/:login`} component={UserManagementDetail} />\n      <ErrorBoundaryRoute path={match.url} component={UserManagement} />\n    </Switch>\n    <ErrorBoundaryRoute path={`${match.url}/:login/delete`} component={UserManagementDeleteDialog} />\n  </>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IUser } from 'app/shared/model/user.model';\nimport { getUser, deleteUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n\nexport class UserManagementDeleteDialog extends React.Component<IUserManagementDeleteDialogProps> {\n  componentDidMount() {\n    this.props.getUser(this.props.match.params.login);\n  }\n\n  confirmDelete = event => {\n    this.props.deleteUser(this.props.user.login);\n    this.handleClose(event);\n  };\n\n  handleClose = event => {\n    event.stopPropagation();\n    this.props.history.goBack();\n  };\n\n  render() {\n    const { user } = this.props;\n    return (\n      <Modal isOpen toggle={this.handleClose}>\n        <ModalHeader toggle={this.handleClose}>\n          <Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate>\n        </ModalHeader>\n        <ModalBody>\n          <Translate contentKey=\"userManagement.delete.question\" interpolate={{ login: user.login }}>\n            Are you sure you want to delete this User?\n          </Translate>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={this.handleClose}>\n            <FontAwesomeIcon icon=\"ban\" />\n            &nbsp;\n            <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n          </Button>\n          <Button color=\"danger\" onClick={this.confirmDelete}>\n            <FontAwesomeIcon icon=\"trash\" />\n            &nbsp;\n            <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser, deleteUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementDeleteDialog);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Badge } from 'reactstrap';\nimport { Translate, TextFormat } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { languages } from 'app/config/translation';\nimport { getUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementDetailProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n\nexport class UserManagementDetail extends React.Component<IUserManagementDetailProps> {\n  componentDidMount() {\n    this.props.getUser(this.props.match.params.login);\n  }\n\n  render() {\n    const { user } = this.props;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"userManagement.detail.title\">User</Translate> [<b>{user.login}</b>]\n        </h2>\n        <Row size=\"md\">\n          <dl className=\"jh-entity-details\">\n            <dt>\n              <Translate contentKey=\"userManagement.login\">Login</Translate>\n            </dt>\n            <dd>\n              <span>{user.login}</span>\n              &nbsp;\n              {user.activated ? (\n                <Badge color=\"success\">\n                  <Translate contentKey=\"userManagement.activated\">Activated</Translate>\n                </Badge>\n              ) : (\n                <Badge color=\"danger\">\n                  <Translate contentKey=\"userManagement.deactivated\">Deactivated</Translate>\n                </Badge>\n              )}\n            </dd>\n            <dt>\n              <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\n            </dt>\n            <dd>{user.firstName}</dd>\n            <dt>\n              <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\n            </dt>\n            <dd>{user.lastName}</dd>\n            <dt>\n              <Translate contentKey=\"userManagement.email\">Email</Translate>\n            </dt>\n            <dd>{user.email}</dd>\n            <dt>\n              <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\n            </dt>\n            <dd>{user.langKey ? languages[user.langKey].name : undefined}</dd>\n            <dt>\n              <Translate contentKey=\"userManagement.createdBy\">Created By</Translate>\n            </dt>\n            <dd>{user.createdBy}</dd>\n            <dt>\n              <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\n            </dt>\n            <dd>\n              <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n            </dd>\n            <dt>\n              <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\n            </dt>\n            <dd>{user.lastModifiedBy}</dd>\n            <dt>\n              <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\n            </dt>\n            <dd>\n              <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n            </dd>\n            <dt>\n              <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\n            </dt>\n            <dd>\n              <ul className=\"list-unstyled\">\n                {user.authorities\n                  ? user.authorities.map((authority, i) => (\n                      <li key={`user-auth-${i}`}>\n                        <Badge color=\"info\">{authority}</Badge>\n                      </li>\n                    ))\n                  : null}\n              </ul>\n            </dd>\n          </dl>\n        </Row>\n        <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n          <FontAwesomeIcon icon=\"arrow-left\" />{' '}\n          <span className=\"d-none d-md-inline\">\n            <Translate contentKey=\"entity.action.back\">Back</Translate>\n          </span>\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementDetail);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Label, Row, Col } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { locales, languages } from 'app/config/translation';\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n\nexport interface IUserManagementUpdateState {\n  isNew: boolean;\n}\n\nexport class UserManagementUpdate extends React.Component<IUserManagementUpdateProps, IUserManagementUpdateState> {\n  state: IUserManagementUpdateState = {\n    isNew: !this.props.match.params || !this.props.match.params.login\n  };\n\n  componentDidMount() {\n    if (this.state.isNew) {\n      this.props.reset();\n    } else {\n      this.props.getUser(this.props.match.params.login);\n    }\n    this.props.getRoles();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  saveUser = (event, values) => {\n    if (this.state.isNew) {\n      this.props.createUser(values);\n    } else {\n      this.props.updateUser(values);\n    }\n    this.handleClose();\n  };\n\n  handleClose = () => {\n    this.props.history.push('/admin/user-management');\n  };\n\n  render() {\n    const isInvalid = false;\n    const { user, loading, updating, roles } = this.props;\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h1>\n              <Translate contentKey=\"userManagement.home.createOrEditLabel\">Create or edit a User</Translate>\n            </h1>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm onValidSubmit={this.saveUser}>\n                {user.id ? (\n                  <AvGroup>\n                    <Label for=\"id\">\n                      <Translate contentKey=\"global.field.id\">ID</Translate>\n                    </Label>\n                    <AvField type=\"text\" className=\"form-control\" name=\"id\" required readOnly value={user.id} />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label for=\"login\">\n                    <Translate contentKey=\"userManagement.login\">Login</Translate>\n                  </Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"login\"\n                    validate={{\n                      required: {\n                        value: true,\n                        errorMessage: translate('register.messages.validate.login.required')\n                      },\n                      pattern: {\n                        value: '^[_.@A-Za-z0-9-]*$',\n                        errorMessage: translate('register.messages.validate.login.pattern')\n                      },\n                      minLength: {\n                        value: 1,\n                        errorMessage: translate('register.messages.validate.login.minlength')\n                      },\n                      maxLength: {\n                        value: 50,\n                        errorMessage: translate('register.messages.validate.login.maxlength')\n                      }\n                    }}\n                    value={user.login}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"firstName\">\n                    <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\n                  </Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"firstName\"\n                    validate={{\n                      maxLength: {\n                        value: 50,\n                        errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                      }\n                    }}\n                    value={user.firstName}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"lastName\">\n                    <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\n                  </Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"lastName\"\n                    validate={{\n                      maxLength: {\n                        value: 50,\n                        errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                      }\n                    }}\n                    value={user.lastName}\n                  />\n                  <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n                </AvGroup>\n                <AvGroup>\n                  <AvField\n                    name=\"email\"\n                    label={translate('global.form.email')}\n                    placeholder={translate('global.form.email.placeholder')}\n                    type=\"email\"\n                    validate={{\n                      required: {\n                        value: true,\n                        errorMessage: translate('global.messages.validate.email.required')\n                      },\n                      email: {\n                        errorMessage: translate('global.messages.validate.email.invalid')\n                      },\n                      minLength: {\n                        value: 5,\n                        errorMessage: translate('global.messages.validate.email.minlength')\n                      },\n                      maxLength: {\n                        value: 254,\n                        errorMessage: translate('global.messages.validate.email.maxlength')\n                      }\n                    }}\n                    value={user.email}\n                  />\n                </AvGroup>\n                <AvGroup check>\n                  <Label>\n                    <AvInput type=\"checkbox\" name=\"activated\" value={user.activated} />{' '}\n                    <Translate contentKey=\"userManagement.activated\">Activated</Translate>\n                  </Label>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"langKey\">\n                    <Translate contentKey=\"userManagement.langKey\">Language Key</Translate>\n                  </Label>\n                  <AvField type=\"select\" className=\"form-control\" name=\"langKey\" value={user.langKey}>\n                    {locales.map(locale => (\n                      <option value={locale} key={locale}>\n                        {languages[locale].name}\n                      </option>\n                    ))}\n                  </AvField>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"authorities\">\n                    <Translate contentKey=\"userManagement.profiles\">Language Key</Translate>\n                  </Label>\n                  <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" value={user.authorities} multiple>\n                    {roles.map(role => (\n                      <option value={role} key={role}>\n                        {role}\n                      </option>\n                    ))}\n                  </AvInput>\n                </AvGroup>\n                <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n                  <FontAwesomeIcon icon=\"arrow-left\" />\n                  &nbsp;\n                  <span className=\"d-none d-md-inline\">\n                    <Translate contentKey=\"entity.action.back\">Back</Translate>\n                  </span>\n                </Button>\n                &nbsp;\n                <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n                  <FontAwesomeIcon icon=\"save\" />\n                  &nbsp;\n                  <Translate contentKey=\"entity.action.save\">Save</Translate>\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user,\n  roles: storeState.userManagement.authorities,\n  loading: storeState.userManagement.loading,\n  updating: storeState.userManagement.updating\n});\n\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementUpdate);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Table, Row, Badge } from 'reactstrap';\nimport {\n  Translate,\n  ICrudGetAllAction,\n  ICrudPutAction,\n  TextFormat,\n  JhiPagination,\n  getPaginationItemsNumber,\n  getSortState,\n  IPaginationBaseState\n} from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\nimport { getUsers, updateUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\n\nexport class UserManagement extends React.Component<IUserManagementProps, IPaginationBaseState> {\n  state: IPaginationBaseState = {\n    ...getSortState(this.props.location, ITEMS_PER_PAGE)\n  };\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  sort = prop => () => {\n    this.setState(\n      {\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\n        sort: prop\n      },\n      () => this.sortUsers()\n    );\n  };\n\n  sortUsers() {\n    this.getUsers();\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\n  }\n\n  handlePagination = activePage => this.setState({ activePage }, () => this.sortUsers());\n\n  getUsers = () => {\n    const { activePage, itemsPerPage, sort, order } = this.state;\n    this.props.getUsers(activePage - 1, itemsPerPage, `${sort},${order}`);\n  };\n\n  toggleActive = user => () => {\n    this.props.updateUser({\n      ...user,\n      activated: !user.activated\n    });\n  };\n\n  render() {\n    const { users, account, match, totalItems } = this.props;\n    return (\n      <div>\n        <h2 id=\"user-management-page-heading\">\n          <Translate contentKey=\"userManagement.home.title\">Users</Translate>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FontAwesomeIcon icon=\"plus\" /> <Translate contentKey=\"userManagement.home.createLabel\">Create a new user</Translate>\n          </Link>\n        </h2>\n        <Table responsive striped>\n          <thead>\n            <tr>\n              <th className=\"hand\" onClick={this.sort('id')}>\n                <Translate contentKey=\"global.field.id\">ID</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort('login')}>\n                <Translate contentKey=\"userManagement.login\">Login</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort('email')}>\n                <Translate contentKey=\"userManagement.email\">Email</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort('langKey')}>\n                <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th>\n                <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\n              </th>\n              <th className=\"hand\" onClick={this.sort('createdDate')}>\n                <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort('lastModifiedBy')}>\n                <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th id=\"modified-date-sort\" className=\"hand\" onClick={this.sort('lastModifiedDate')}>\n                <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th />\n            </tr>\n          </thead>\n          <tbody>\n            {users.map((user, i) => (\n              <tr id={user.login} key={`user-${i}`}>\n                <td>\n                  <Button tag={Link} to={`${match.url}/${user.login}`} color=\"link\" size=\"sm\">\n                    {user.id}\n                  </Button>\n                </td>\n                <td>{user.login}</td>\n                <td>{user.email}</td>\n                <td>\n                  {user.activated ? (\n                    <Button color=\"success\" onClick={this.toggleActive(user)}>\n                      SI\n                    </Button>\n                  ) : (\n                    <Button color=\"danger\" onClick={this.toggleActive(user)}>\n                      NO\n                    </Button>\n                  )}\n                </td>\n                <td>{user.langKey}</td>\n                <td>\n                  {user.authorities\n                    ? user.authorities.map((authority, j) => (\n                        <div key={`user-auth-${i}-${j}`}>\n                          <Badge color=\"info\">{authority}</Badge>\n                        </div>\n                      ))\n                    : null}\n                </td>\n                <td>\n                  <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n                </td>\n                <td>{user.lastModifiedBy}</td>\n                <td>\n                  <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n                </td>\n                <td className=\"text-right\">\n                  <div className=\"btn-group flex-btn-group-container\">\n                    <Button tag={Link} to={`${match.url}/${user.login}`} color=\"info\" size=\"sm\">\n                      <FontAwesomeIcon icon=\"eye\" />{' '}\n                      <span className=\"d-none d-md-inline\">\n                        <Translate contentKey=\"entity.action.view\">View</Translate>\n                      </span>\n                    </Button>\n                    <Button tag={Link} to={`${match.url}/${user.login}/edit`} color=\"primary\" size=\"sm\">\n                      <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\n                      <span className=\"d-none d-md-inline\">\n                        <Translate contentKey=\"entity.action.edit\">Edit</Translate>\n                      </span>\n                    </Button>\n                    <Button\n                      tag={Link}\n                      to={`${match.url}/${user.login}/delete`}\n                      color=\"danger\"\n                      size=\"sm\"\n                      disabled={account.login === user.login}\n                    >\n                      <FontAwesomeIcon icon=\"trash\" />{' '}\n                      <span className=\"d-none d-md-inline\">\n                        <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n                      </span>\n                    </Button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\n            activePage={this.state.activePage}\n            onSelect={this.handlePagination}\n            maxButtons={5}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  users: storeState.userManagement.users,\n  totalItems: storeState.userManagement.totalItems,\n  account: storeState.authentication.account\n});\n\nconst mapDispatchToProps = { getUsers, updateUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagement);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AA6DA;AAtGA;AACA;AACA;AAyCA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChKA;AACA;AACA;AACA;AAEA;AAWA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;;AAoFA;AA/GA;AACA;AACA;AACA;AA4BA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAOA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAGA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;;;;;;;;;ACpJA;AAAA;AAAA;AAAA;AAEA;AAEA;AAIA;AACA;AACA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AACA;AAMA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AAGA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAsDA;AAnFA;AACA;AACA;AA6BA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAEA;AAGA;AATA;AAoBA;AAGA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;ACxHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AAEA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AA8FA;AApHA;AACA;AACA;AAsBA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AAGA;AACA;AAEA;AACA;AAOA;AAOA;AAOA;AAOA;AAOA;AAcA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpJA;AACA;AACA;AACA;AAWA;AAEA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;;AAsFA;AAhGA;AACA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAeA;AAKA;AASA;AAMA;AAEA;AACA;AAOA;AAEA;AACA;AAWA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;AC9IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AARA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAEA;AACA;AACA;AAGA;AAKA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AA6BA;AAzCA;AACA;AACA;AAYA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;;AAEA;AAEA;AACA;;AAEA;AAKA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;;AA2FA;AA1FA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAEA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAwKA;AAhMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAeA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAKA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAQA;AACA;AACA;AAEA;AAQA;AACA;;AAEA;AACA;;AAIA;AACA;;AAEA;AAQA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvOA;AACA;AACA;AACA;AACA;AAUA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAGA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;;AAkIA;AAjKA;AACA;AACA;AAYA;AACA;AACA;AACA;AAgBA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AAIA;AACA;AACA;AAWA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AAOA;AAAA;AACA;AACA;AASA;AACA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;A","sourceRoot":""}