{"remainingRequest":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js??ref--4-3!E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\password-reset\\init\\password-reset-init.tsx","dependencies":[{"path":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\password-reset\\init\\password-reset-init.tsx","mtime":1555002494671},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555002618200},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Button, Alert, Col, Row } from 'reactstrap';\r\nimport { handlePasswordResetInit, reset } from '../password-reset.reducer';\r\nvar PasswordResetInit = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PasswordResetInit, _super);\r\n    function PasswordResetInit() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.handleValidSubmit = function (event, values) {\r\n            _this.props.handlePasswordResetInit(values.email);\r\n            event.preventDefault();\r\n        };\r\n        return _this;\r\n    }\r\n    PasswordResetInit.prototype.componentWillUnmount = function () {\r\n        this.props.reset();\r\n    };\r\n    PasswordResetInit.prototype.render = function () {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h1\", null,\r\n                        React.createElement(Translate, { contentKey: \"reset.request.title\" }, \"Reset your password\")),\r\n                    React.createElement(Alert, { color: \"warning\" },\r\n                        React.createElement(\"p\", null,\r\n                            React.createElement(Translate, { contentKey: \"reset.request.messages.info\" }, \"Enter the email address you used to register\"))),\r\n                    React.createElement(AvForm, { onValidSubmit: this.handleValidSubmit },\r\n                        React.createElement(AvField, { name: \"email\", label: translate('global.form.email'), placeholder: translate('global.form.email.placeholder'), type: \"email\", validate: {\r\n                                required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\r\n                                minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\r\n                                maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\r\n                            } }),\r\n                        React.createElement(Button, { color: \"primary\", type: \"submit\" },\r\n                            React.createElement(Translate, { contentKey: \"reset.request.form.button\" }, \"Reset password\")))))));\r\n    };\r\n    return PasswordResetInit;\r\n}(React.Component));\r\nexport { PasswordResetInit };\r\nvar mapDispatchToProps = { handlePasswordResetInit: handlePasswordResetInit, reset: reset };\r\nexport default connect(null, mapDispatchToProps)(PasswordResetInit);\r\n",{"version":3,"file":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\password-reset\\init\\password-reset-init.tsx","sourceRoot":"","sources":["E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\password-reset\\init\\password-reset-init.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,gCAAgC,CAAC;AACjE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,YAAY,CAAC;AAGrD,OAAO,EAAE,uBAAuB,EAAE,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAI3E;IAAuC,6CAAwC;IAA/E;QAAA,qEA4CC;QAvCC,uBAAiB,GAAG,UAAC,KAAK,EAAE,MAAM;YAChC,KAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjD,KAAK,CAAC,cAAc,EAAE,CAAC;QACzB,CAAC,CAAC;;IAoCJ,CAAC;IA3CC,gDAAoB,GAApB;QACE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAOD,kCAAM,GAAN;QACE,OAAO,CACL;YACE,oBAAC,GAAG,IAAC,SAAS,EAAC,wBAAwB;gBACrC,oBAAC,GAAG,IAAC,EAAE,EAAC,GAAG;oBACT;wBACE,oBAAC,SAAS,IAAC,UAAU,EAAC,qBAAqB,0BAAgC,CACxE;oBACL,oBAAC,KAAK,IAAC,KAAK,EAAC,SAAS;wBACpB;4BACE,oBAAC,SAAS,IAAC,UAAU,EAAC,6BAA6B,mDAAyD,CAC1G,CACE;oBACR,oBAAC,MAAM,IAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB;wBAC3C,oBAAC,OAAO,IACN,IAAI,EAAC,OAAO,EACZ,KAAK,EAAE,SAAS,CAAC,mBAAmB,CAAC,EACrC,WAAW,EAAE,SAAS,CAAC,+BAA+B,CAAC,EACvD,IAAI,EAAC,OAAO,EACZ,QAAQ,EAAE;gCACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,yCAAyC,CAAC,EAAE;gCAC7F,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,0CAA0C,CAAC,EAAE;gCAC5F,SAAS,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,CAAC,0CAA0C,CAAC,EAAE;6BAC/F,GACD;wBACF,oBAAC,MAAM,IAAC,KAAK,EAAC,SAAS,EAAC,IAAI,EAAC,QAAQ;4BACnC,oBAAC,SAAS,IAAC,UAAU,EAAC,2BAA2B,qBAA2B,CACrE,CACF,CACL,CACF,CACF,CACP,CAAC;IACJ,CAAC;IACH,wBAAC;AAAD,CAAC,AA5CD,CAAuC,KAAK,CAAC,SAAS,GA4CrD;;AAED,IAAM,kBAAkB,GAAG,EAAE,uBAAuB,yBAAA,EAAE,KAAK,OAAA,EAAE,CAAC;AAI9D,eAAe,OAAO,CACpB,IAAI,EACJ,kBAAkB,CACnB,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Button, Alert, Col, Row } from 'reactstrap';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { handlePasswordResetInit, reset } from '../password-reset.reducer';\n\nexport type IPasswordResetInitProps = DispatchProps;\n\nexport class PasswordResetInit extends React.Component<IPasswordResetInitProps> {\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    this.props.handlePasswordResetInit(values.email);\n    event.preventDefault();\n  };\n\n  render() {\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h1>\n              <Translate contentKey=\"reset.request.title\">Reset your password</Translate>\n            </h1>\n            <Alert color=\"warning\">\n              <p>\n                <Translate contentKey=\"reset.request.messages.info\">Enter the email address you used to register</Translate>\n              </p>\n            </Alert>\n            <AvForm onValidSubmit={this.handleValidSubmit}>\n              <AvField\n                name=\"email\"\n                label={translate('global.form.email')}\n                placeholder={translate('global.form.email.placeholder')}\n                type=\"email\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                  minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                  maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n                }}\n              />\n              <Button color=\"primary\" type=\"submit\">\n                <Translate contentKey=\"reset.request.form.button\">Reset password</Translate>\n              </Button>\n            </AvForm>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = { handlePasswordResetInit, reset };\n\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(PasswordResetInit);\n"]}]}