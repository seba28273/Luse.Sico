{"remainingRequest":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js??ref--4-2!E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-update.tsx","dependencies":[{"path":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-update.tsx","mtime":1556320299287},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555002618200},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Label, Row, Col } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { locales, languages } from 'app/config/translation';\r\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\r\nvar UserManagementUpdate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(UserManagementUpdate, _super);\r\n    function UserManagementUpdate() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            isNew: !_this.props.match.params || !_this.props.match.params.login\r\n        };\r\n        _this.saveUser = function (event, values) {\r\n            if (_this.state.isNew) {\r\n                _this.props.createUser(values);\r\n            }\r\n            else {\r\n                _this.props.updateUser(values);\r\n            }\r\n            _this.handleClose();\r\n        };\r\n        _this.handleClose = function () {\r\n            _this.props.history.push('/admin/user-management');\r\n        };\r\n        return _this;\r\n    }\r\n    UserManagementUpdate.prototype.componentDidMount = function () {\r\n        if (this.state.isNew) {\r\n            this.props.reset();\r\n        }\r\n        else {\r\n            this.props.getUser(this.props.match.params.login);\r\n        }\r\n        this.props.getRoles();\r\n    };\r\n    UserManagementUpdate.prototype.componentWillUnmount = function () {\r\n        this.props.reset();\r\n    };\r\n    UserManagementUpdate.prototype.render = function () {\r\n        var isInvalid = false;\r\n        var _a = this.props, user = _a.user, loading = _a.loading, updating = _a.updating, roles = _a.roles;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h1\", null,\r\n                        React.createElement(Translate, { contentKey: \"userManagement.home.createOrEditLabel\" }, \"Create or edit a User\")))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { onValidSubmit: this.saveUser },\r\n                    user.id ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"id\" },\r\n                            React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\r\n                        React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true, value: user.id }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"login\" },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.login\" }, \"Login\")),\r\n                        React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"login\", validate: {\r\n                                required: {\r\n                                    value: true,\r\n                                    errorMessage: translate('register.messages.validate.login.required')\r\n                                },\r\n                                pattern: {\r\n                                    value: '^[_.@A-Za-z0-9-]*$',\r\n                                    errorMessage: translate('register.messages.validate.login.pattern')\r\n                                },\r\n                                minLength: {\r\n                                    value: 1,\r\n                                    errorMessage: translate('register.messages.validate.login.minlength')\r\n                                },\r\n                                maxLength: {\r\n                                    value: 50,\r\n                                    errorMessage: translate('register.messages.validate.login.maxlength')\r\n                                }\r\n                            }, value: user.login })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"firstName\" },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.firstName\" }, \"First Name\")),\r\n                        React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"firstName\", validate: {\r\n                                maxLength: {\r\n                                    value: 50,\r\n                                    errorMessage: translate('entity.validation.maxlength', { max: 50 })\r\n                                }\r\n                            }, value: user.firstName })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"lastName\" },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.lastName\" }, \"Last Name\")),\r\n                        React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"lastName\", validate: {\r\n                                maxLength: {\r\n                                    value: 50,\r\n                                    errorMessage: translate('entity.validation.maxlength', { max: 50 })\r\n                                }\r\n                            }, value: user.lastName }),\r\n                        React.createElement(AvFeedback, null, \"This field cannot be longer than 50 characters.\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(AvField, { name: \"email\", label: translate('global.form.email'), placeholder: translate('global.form.email.placeholder'), type: \"email\", validate: {\r\n                                required: {\r\n                                    value: true,\r\n                                    errorMessage: translate('global.messages.validate.email.required')\r\n                                },\r\n                                email: {\r\n                                    errorMessage: translate('global.messages.validate.email.invalid')\r\n                                },\r\n                                minLength: {\r\n                                    value: 5,\r\n                                    errorMessage: translate('global.messages.validate.email.minlength')\r\n                                },\r\n                                maxLength: {\r\n                                    value: 254,\r\n                                    errorMessage: translate('global.messages.validate.email.maxlength')\r\n                                }\r\n                            }, value: user.email })),\r\n                    React.createElement(AvGroup, { check: true },\r\n                        React.createElement(Label, null,\r\n                            React.createElement(AvInput, { type: \"checkbox\", name: \"activated\", value: user.activated }),\r\n                            ' ',\r\n                            React.createElement(Translate, { contentKey: \"userManagement.activated\" }, \"Activated\"))),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"langKey\" },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.langKey\" }, \"Language Key\")),\r\n                        React.createElement(AvField, { type: \"select\", className: \"form-control\", name: \"langKey\", value: user.langKey }, locales.map(function (locale) { return (React.createElement(\"option\", { value: locale, key: locale }, languages[locale].name)); }))),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"authorities\" },\r\n                            React.createElement(Translate, { contentKey: \"userManagement.profiles\" }, \"Language Key\")),\r\n                        React.createElement(AvInput, { type: \"select\", className: \"form-control\", name: \"authorities\", value: user.authorities, multiple: true }, roles.map(function (role) { return (React.createElement(\"option\", { value: role, key: role }, role)); }))),\r\n                    React.createElement(Button, { tag: Link, to: \"/admin/user-management\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                            React.createElement(Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", type: \"submit\", disabled: isInvalid || updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\r\n    };\r\n    return UserManagementUpdate;\r\n}(React.Component));\r\nexport { UserManagementUpdate };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    user: storeState.userManagement.user,\r\n    roles: storeState.userManagement.authorities,\r\n    loading: storeState.userManagement.loading,\r\n    updating: storeState.userManagement.updating\r\n}); };\r\nvar mapDispatchToProps = { getUser: getUser, getRoles: getRoles, updateUser: updateUser, createUser: createUser, reset: reset };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementUpdate);\r\n",{"version":3,"file":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-update.tsx","sourceRoot":"","sources":["E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Label, Row, Col } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { locales, languages } from 'app/config/translation';\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n\nexport interface IUserManagementUpdateState {\n  isNew: boolean;\n}\n\nexport class UserManagementUpdate extends React.Component<IUserManagementUpdateProps, IUserManagementUpdateState> {\n  state: IUserManagementUpdateState = {\n    isNew: !this.props.match.params || !this.props.match.params.login\n  };\n\n  componentDidMount() {\n    if (this.state.isNew) {\n      this.props.reset();\n    } else {\n      this.props.getUser(this.props.match.params.login);\n    }\n    this.props.getRoles();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  saveUser = (event, values) => {\n    if (this.state.isNew) {\n      this.props.createUser(values);\n    } else {\n      this.props.updateUser(values);\n    }\n    this.handleClose();\n  };\n\n  handleClose = () => {\n    this.props.history.push('/admin/user-management');\n  };\n\n  render() {\n    const isInvalid = false;\n    const { user, loading, updating, roles } = this.props;\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h1>\n              <Translate contentKey=\"userManagement.home.createOrEditLabel\">Create or edit a User</Translate>\n            </h1>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm onValidSubmit={this.saveUser}>\n                {user.id ? (\n                  <AvGroup>\n                    <Label for=\"id\">\n                      <Translate contentKey=\"global.field.id\">ID</Translate>\n                    </Label>\n                    <AvField type=\"text\" className=\"form-control\" name=\"id\" required readOnly value={user.id} />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label for=\"login\">\n                    <Translate contentKey=\"userManagement.login\">Login</Translate>\n                  </Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"login\"\n                    validate={{\n                      required: {\n                        value: true,\n                        errorMessage: translate('register.messages.validate.login.required')\n                      },\n                      pattern: {\n                        value: '^[_.@A-Za-z0-9-]*$',\n                        errorMessage: translate('register.messages.validate.login.pattern')\n                      },\n                      minLength: {\n                        value: 1,\n                        errorMessage: translate('register.messages.validate.login.minlength')\n                      },\n                      maxLength: {\n                        value: 50,\n                        errorMessage: translate('register.messages.validate.login.maxlength')\n                      }\n                    }}\n                    value={user.login}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"firstName\">\n                    <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\n                  </Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"firstName\"\n                    validate={{\n                      maxLength: {\n                        value: 50,\n                        errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                      }\n                    }}\n                    value={user.firstName}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"lastName\">\n                    <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\n                  </Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"lastName\"\n                    validate={{\n                      maxLength: {\n                        value: 50,\n                        errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                      }\n                    }}\n                    value={user.lastName}\n                  />\n                  <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n                </AvGroup>\n                <AvGroup>\n                  <AvField\n                    name=\"email\"\n                    label={translate('global.form.email')}\n                    placeholder={translate('global.form.email.placeholder')}\n                    type=\"email\"\n                    validate={{\n                      required: {\n                        value: true,\n                        errorMessage: translate('global.messages.validate.email.required')\n                      },\n                      email: {\n                        errorMessage: translate('global.messages.validate.email.invalid')\n                      },\n                      minLength: {\n                        value: 5,\n                        errorMessage: translate('global.messages.validate.email.minlength')\n                      },\n                      maxLength: {\n                        value: 254,\n                        errorMessage: translate('global.messages.validate.email.maxlength')\n                      }\n                    }}\n                    value={user.email}\n                  />\n                </AvGroup>\n                <AvGroup check>\n                  <Label>\n                    <AvInput type=\"checkbox\" name=\"activated\" value={user.activated} />{' '}\n                    <Translate contentKey=\"userManagement.activated\">Activated</Translate>\n                  </Label>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"langKey\">\n                    <Translate contentKey=\"userManagement.langKey\">Language Key</Translate>\n                  </Label>\n                  <AvField type=\"select\" className=\"form-control\" name=\"langKey\" value={user.langKey}>\n                    {locales.map(locale => (\n                      <option value={locale} key={locale}>\n                        {languages[locale].name}\n                      </option>\n                    ))}\n                  </AvField>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"authorities\">\n                    <Translate contentKey=\"userManagement.profiles\">Language Key</Translate>\n                  </Label>\n                  <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" value={user.authorities} multiple>\n                    {roles.map(role => (\n                      <option value={role} key={role}>\n                        {role}\n                      </option>\n                    ))}\n                  </AvInput>\n                </AvGroup>\n                <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n                  <FontAwesomeIcon icon=\"arrow-left\" />\n                  &nbsp;\n                  <span className=\"d-none d-md-inline\">\n                    <Translate contentKey=\"entity.action.back\">Back</Translate>\n                  </span>\n                </Button>\n                &nbsp;\n                <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n                  <FontAwesomeIcon icon=\"save\" />\n                  &nbsp;\n                  <Translate contentKey=\"entity.action.save\">Save</Translate>\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user,\n  roles: storeState.userManagement.authorities,\n  loading: storeState.userManagement.loading,\n  updating: storeState.userManagement.updating\n});\n\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementUpdate);\n"]}]}