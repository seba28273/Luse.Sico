{"remainingRequest":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js??ref--4-2!E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\administration\\health\\health-modal.tsx","dependencies":[{"path":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\administration\\health\\health-modal.tsx","mtime":1555002495456},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555002618200},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\nvar formatDiskSpaceOutput = function (rawValue) {\r\n    // Should display storage space in an human readable unit\r\n    var val = rawValue / 1073741824;\r\n    if (val > 1) {\r\n        // Value\r\n        return val.toFixed(2) + ' GB';\r\n    }\r\n    else {\r\n        return (rawValue / 1048576).toFixed(2) + ' MB';\r\n    }\r\n};\r\nvar HealthModal = function (_a) {\r\n    var handleClose = _a.handleClose, healthObject = _a.healthObject, showModal = _a.showModal;\r\n    var data = healthObject.details || {};\r\n    return (React.createElement(Modal, { isOpen: showModal, modalTransition: { timeout: 20 }, backdropTransition: { timeout: 10 }, toggle: handleClose },\r\n        React.createElement(ModalHeader, { toggle: handleClose }, healthObject.name),\r\n        React.createElement(ModalBody, null,\r\n            React.createElement(Table, { bordered: true },\r\n                React.createElement(\"thead\", null,\r\n                    React.createElement(\"tr\", null,\r\n                        React.createElement(\"th\", null, \"Name\"),\r\n                        React.createElement(\"th\", null, \"Value\"))),\r\n                React.createElement(\"tbody\", null, Object.keys(data).map(function (key, index) { return (React.createElement(\"tr\", { key: index },\r\n                    React.createElement(\"td\", null, key),\r\n                    React.createElement(\"td\", null, healthObject.name === 'diskSpace' ? formatDiskSpaceOutput(data[key]) : JSON.stringify(data[key])))); })))),\r\n        React.createElement(ModalFooter, null,\r\n            React.createElement(Button, { color: \"primary\", onClick: handleClose }, \"Close\"))));\r\n};\r\nexport default HealthModal;\r\n",{"version":3,"file":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\administration\\health\\health-modal.tsx","sourceRoot":"","sources":["E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\administration\\health\\health-modal.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAEvF,IAAM,qBAAqB,GAAG,UAAA,QAAQ;IACpC,yDAAyD;IACzD,IAAM,GAAG,GAAG,QAAQ,GAAG,UAAU,CAAC;IAClC,IAAI,GAAG,GAAG,CAAC,EAAE;QACX,QAAQ;QACR,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;KAC/B;SAAM;QACL,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;KAChD;AACH,CAAC,CAAC;AAEF,IAAM,WAAW,GAAG,UAAC,EAAwC;QAAtC,4BAAW,EAAE,8BAAY,EAAE,wBAAS;IACzD,IAAM,IAAI,GAAG,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC;IACxC,OAAO,CACL,oBAAC,KAAK,IAAC,MAAM,EAAE,SAAS,EAAE,eAAe,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,kBAAkB,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,WAAW;QAClH,oBAAC,WAAW,IAAC,MAAM,EAAE,WAAW,IAAG,YAAY,CAAC,IAAI,CAAe;QACnE,oBAAC,SAAS;YACR,oBAAC,KAAK,IAAC,QAAQ;gBACb;oBACE;wBACE,uCAAa;wBACb,wCAAc,CACX,CACC;gBACR,mCACG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,CACrC,4BAAI,GAAG,EAAE,KAAK;oBACZ,gCAAK,GAAG,CAAM;oBACd,gCAAK,YAAY,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAM,CACxG,CACN,EALsC,CAKtC,CAAC,CACI,CACF,CACE;QACZ,oBAAC,WAAW;YACV,oBAAC,MAAM,IAAC,KAAK,EAAC,SAAS,EAAC,OAAO,EAAE,WAAW,YAEnC,CACG,CACR,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,WAAW,CAAC","sourcesContent":["import React from 'react';\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nconst formatDiskSpaceOutput = rawValue => {\n  // Should display storage space in an human readable unit\n  const val = rawValue / 1073741824;\n  if (val > 1) {\n    // Value\n    return val.toFixed(2) + ' GB';\n  } else {\n    return (rawValue / 1048576).toFixed(2) + ' MB';\n  }\n};\n\nconst HealthModal = ({ handleClose, healthObject, showModal }) => {\n  const data = healthObject.details || {};\n  return (\n    <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }} toggle={handleClose}>\n      <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\n      <ModalBody>\n        <Table bordered>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(data).map((key, index) => (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{healthObject.name === 'diskSpace' ? formatDiskSpaceOutput(data[key]) : JSON.stringify(data[key])}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default HealthModal;\n"]}]}