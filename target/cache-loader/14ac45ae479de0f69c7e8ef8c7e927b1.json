{"remainingRequest":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js??ref--4-2!E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\entities\\cliente\\cliente-update.tsx","dependencies":[{"path":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\entities\\cliente\\cliente-update.tsx","mtime":1565633409796},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555002618200},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities as getBancos } from 'app/entities/banco/banco.reducer';\r\nimport { getEntities as getDepartments } from 'app/entities/department/department.reducer';\r\nimport { getEntity, updateEntity, createEntity, reset } from './cliente.reducer';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';\r\nvar ClienteUpdate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ClienteUpdate, _super);\r\n    function ClienteUpdate(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.saveEntity = function (event, errors, values) {\r\n            values.fechaNacimiento = convertDateTimeToServer(values.fechaNacimiento);\r\n            if (errors.length === 0) {\r\n                var clienteEntity = _this.props.clienteEntity;\r\n                var entity = tslib_1.__assign({}, clienteEntity, values);\r\n                if (_this.state.isNew) {\r\n                    _this.props.createEntity(entity);\r\n                }\r\n                else {\r\n                    _this.props.updateEntity(entity);\r\n                }\r\n            }\r\n        };\r\n        _this.handleClose = function () {\r\n            _this.props.history.push('/entity/cliente');\r\n        };\r\n        _this.state = {\r\n            departmentId: '0',\r\n            bancoId: '0',\r\n            isNew: !_this.props.match.params || !_this.props.match.params.id\r\n        };\r\n        return _this;\r\n    }\r\n    ClienteUpdate.prototype.componentWillUpdate = function (nextProps, nextState) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.handleClose();\r\n        }\r\n    };\r\n    ClienteUpdate.prototype.componentDidMount = function () {\r\n        if (this.state.isNew) {\r\n            this.props.reset();\r\n        }\r\n        else {\r\n            this.props.getEntity(this.props.match.params.id);\r\n        }\r\n        this.props.getDepartments();\r\n        this.props.getBancos();\r\n    };\r\n    ClienteUpdate.prototype.render = function () {\r\n        var _a = this.props, clienteEntity = _a.clienteEntity, departments = _a.departments, bancos = _a.bancos, loading = _a.loading, updating = _a.updating;\r\n        var isNew = this.state.isNew;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"sicoApp.cliente.home.createOrEditLabel\" },\r\n                        React.createElement(Translate, { contentKey: \"sicoApp.cliente.home.createOrEditLabel\" }, \"Create or edit a Cliente\")))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : clienteEntity, onSubmit: this.saveEntity },\r\n                    !isNew ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"id\" },\r\n                            React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\r\n                        React.createElement(AvInput, { id: \"cliente-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"firstNameLabel\", for: \"firstName\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.firstName\" }, \"First Name\")),\r\n                        React.createElement(AvField, { id: \"cliente-firstName\", type: \"text\", name: \"firstName\", validate: {\r\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"lastNameLabel\", for: \"lastName\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.lastName\" }, \"Last Name\")),\r\n                        React.createElement(AvField, { id: \"cliente-lastName\", type: \"text\", name: \"lastName\", validate: {\r\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"dniLabel\", for: \"dni\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.dni\" }, \"Dni\")),\r\n                        React.createElement(AvField, { id: \"cliente-dni\", type: \"text\", name: \"dni\", validate: {\r\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"cuitLabel\", for: \"cuit\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.cuit\" }, \"Cuit\")),\r\n                        React.createElement(AvField, { id: \"cliente-cuit\", type: \"text\", name: \"cuit\", validate: {\r\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"fechaNacimientoLabel\", for: \"fechaNacimiento\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.fechaNacimiento\" }, \"Fecha Nacimiento\")),\r\n                        React.createElement(AvInput, { id: \"cliente-fechaNacimiento\", type: \"date\", className: \"form-control\", name: \"fechaNacimiento\", placeholder: 'YYYY-MM-DD', value: isNew ? null : convertDateTimeFromServer(this.props.clienteEntity.fechaNacimiento) })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"direccionLabel\", for: \"direccion\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.direccion\" }, \"Direccion\")),\r\n                        React.createElement(AvField, { id: \"cliente-direccion\", type: \"text\", name: \"direccion\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"numeroLabel\", for: \"numero\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.numero\" }, \"Numero\")),\r\n                        React.createElement(AvField, { id: \"cliente-numero\", type: \"string\", className: \"form-control\", name: \"numero\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"department.id\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.department\" }, \"Department\")),\r\n                        React.createElement(AvInput, { id: \"cliente-department\", type: \"select\", className: \"form-control\", name: \"department.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            departments\r\n                                ? departments.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.departmentName)); })\r\n                                : null)),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"telefonoLabel\", for: \"telefono\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.telefono\" }, \"Telefono\")),\r\n                        React.createElement(AvField, { id: \"cliente-telefono\", type: \"text\", name: \"telefono\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"mailLabel\", for: \"mail\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.mail\" }, \"Mail\")),\r\n                        React.createElement(AvField, { id: \"cliente-mail\", type: \"text\", name: \"mail\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"sexoLabel\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.sexo\" }, \"Sexo\")),\r\n                        React.createElement(AvInput, { id: \"cliente-sexo\", type: \"select\", className: \"form-control\", name: \"sexo\", value: (!isNew && clienteEntity.sexo) || 'MASCULINO' },\r\n                            React.createElement(\"option\", { value: \"MASCULINO\" },\r\n                                React.createElement(Translate, { contentKey: \"sicoApp.SEXO.MASCULINO\" })),\r\n                            React.createElement(\"option\", { value: \"FEMENINO\" },\r\n                                React.createElement(Translate, { contentKey: \"sicoApp.SEXO.FEMENINO\" })))),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"salaryLabel\", for: \"nroCbu\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.nroCbu\" }, \"Nro CBU\")),\r\n                        React.createElement(AvField, { id: \"cliente-nroCbu\", type: \"string\", className: \"form-control\", name: \"nroCbu\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"salaryLabel\", for: \"salary\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.numeroCuenta\" }, \"Numero Cuenta\")),\r\n                        React.createElement(AvField, { id: \"cliente-numeroCuenta\", type: \"string\", className: \"form-control\", name: \"numeroCuenta\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"salaryLabel\", for: \"salary\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.salary\" }, \"Salary\")),\r\n                        React.createElement(AvField, { id: \"cliente-salary\", type: \"string\", className: \"form-control\", name: \"salary\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"scoringCreditLabel\", for: \"scoringCredit\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.scoringCredit\" }, \"Scoring Credit\")),\r\n                        React.createElement(AvField, { id: \"cliente-scoringCredit\", type: \"string\", className: \"form-control\", name: \"scoringCredit\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"banco.id\" },\r\n                            React.createElement(Translate, { contentKey: \"sicoApp.cliente.banco\" }, \"Banco\")),\r\n                        React.createElement(AvInput, { id: \"cliente-banco\", type: \"select\", className: \"form-control\", name: \"banco.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            bancos\r\n                                ? bancos.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.bancoName)); })\r\n                                : null)),\r\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/entity/cliente\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                            React.createElement(Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\r\n    };\r\n    return ClienteUpdate;\r\n}(React.Component));\r\nexport { ClienteUpdate };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    departments: storeState.department.entities,\r\n    bancos: storeState.banco.entities,\r\n    clienteEntity: storeState.cliente.entity,\r\n    loading: storeState.cliente.loading,\r\n    updating: storeState.cliente.updating,\r\n    updateSuccess: storeState.cliente.updateSuccess\r\n}); };\r\nvar mapDispatchToProps = {\r\n    getDepartments: getDepartments,\r\n    getBancos: getBancos,\r\n    getEntity: getEntity,\r\n    updateEntity: updateEntity,\r\n    createEntity: createEntity,\r\n    reset: reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ClienteUpdate);\r\n",{"version":3,"file":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\entities\\cliente\\cliente-update.tsx","sourceRoot":"","sources":["E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\entities\\cliente\\cliente-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Col, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IRootState } from 'app/shared/reducers';\n\nimport { IDepartment } from 'app/shared/model/department.model';\nimport { IBanco } from 'app/shared/model/banco.model';\nimport { getEntities as getBancos } from 'app/entities/banco/banco.reducer';\nimport { getEntities as getDepartments } from 'app/entities/department/department.reducer';\nimport { getEntity, updateEntity, createEntity, reset } from './cliente.reducer';\nimport { ICliente } from 'app/shared/model/cliente.model';\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';\nimport { mapIdList } from 'app/shared/util/entity-utils';\nimport banco from 'app/entities/banco/banco';\n\nexport interface IClienteUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n\nexport interface IClienteUpdateState {\n  isNew: boolean;\n  departmentId: string;\n  bancoId: string;\n}\n\nexport class ClienteUpdate extends React.Component<IClienteUpdateProps, IClienteUpdateState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      departmentId: '0',\n      bancoId: '0',\n      isNew: !this.props.match.params || !this.props.match.params.id\n    };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\n      this.handleClose();\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.isNew) {\n      this.props.reset();\n    } else {\n      this.props.getEntity(this.props.match.params.id);\n    }\n\n    this.props.getDepartments();\n    this.props.getBancos();\n  }\n\n  saveEntity = (event, errors, values) => {\n    values.fechaNacimiento = convertDateTimeToServer(values.fechaNacimiento);\n\n    if (errors.length === 0) {\n      const { clienteEntity } = this.props;\n      const entity = {\n        ...clienteEntity,\n        ...values\n      };\n\n      if (this.state.isNew) {\n        this.props.createEntity(entity);\n      } else {\n        this.props.updateEntity(entity);\n      }\n    }\n  };\n\n  handleClose = () => {\n    this.props.history.push('/entity/cliente');\n  };\n\n  render() {\n    const { clienteEntity, departments, bancos, loading, updating } = this.props;\n    const { isNew } = this.state;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"sicoApp.cliente.home.createOrEditLabel\">\n              <Translate contentKey=\"sicoApp.cliente.home.createOrEditLabel\">Create or edit a Cliente</Translate>\n            </h2>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm model={isNew ? {} : clienteEntity} onSubmit={this.saveEntity}>\n                {!isNew ? (\n                  <AvGroup>\n                    <Label for=\"id\">\n                      <Translate contentKey=\"global.field.id\">ID</Translate>\n                    </Label>\n                    <AvInput id=\"cliente-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label id=\"firstNameLabel\" for=\"firstName\">\n                    <Translate contentKey=\"sicoApp.cliente.firstName\">First Name</Translate>\n                  </Label>\n                  <AvField\n                    id=\"cliente-firstName\"\n                    type=\"text\"\n                    name=\"firstName\"\n                    validate={{\n                      required: { value: true, errorMessage: translate('entity.validation.required') }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"lastNameLabel\" for=\"lastName\">\n                    <Translate contentKey=\"sicoApp.cliente.lastName\">Last Name</Translate>\n                  </Label>\n                  <AvField\n                    id=\"cliente-lastName\"\n                    type=\"text\"\n                    name=\"lastName\"\n                    validate={{\n                      required: { value: true, errorMessage: translate('entity.validation.required') }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"dniLabel\" for=\"dni\">\n                    <Translate contentKey=\"sicoApp.cliente.dni\">Dni</Translate>\n                  </Label>\n                  <AvField\n                    id=\"cliente-dni\"\n                    type=\"text\"\n                    name=\"dni\"\n                    validate={{\n                      required: { value: true, errorMessage: translate('entity.validation.required') }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"cuitLabel\" for=\"cuit\">\n                    <Translate contentKey=\"sicoApp.cliente.cuit\">Cuit</Translate>\n                  </Label>\n                  <AvField\n                    id=\"cliente-cuit\"\n                    type=\"text\"\n                    name=\"cuit\"\n                    validate={{\n                      required: { value: true, errorMessage: translate('entity.validation.required') }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"fechaNacimientoLabel\" for=\"fechaNacimiento\">\n                    <Translate contentKey=\"sicoApp.cliente.fechaNacimiento\">Fecha Nacimiento</Translate>\n                  </Label>\n                  <AvInput\n                    id=\"cliente-fechaNacimiento\"\n                    type=\"date\"\n                    className=\"form-control\"\n                    name=\"fechaNacimiento\"\n                    placeholder={'YYYY-MM-DD'}\n                    value={isNew ? null : convertDateTimeFromServer(this.props.clienteEntity.fechaNacimiento)}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"direccionLabel\" for=\"direccion\">\n                    <Translate contentKey=\"sicoApp.cliente.direccion\">Direccion</Translate>\n                  </Label>\n                  <AvField id=\"cliente-direccion\" type=\"text\" name=\"direccion\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"numeroLabel\" for=\"numero\">\n                    <Translate contentKey=\"sicoApp.cliente.numero\">Numero</Translate>\n                  </Label>\n                  <AvField id=\"cliente-numero\" type=\"string\" className=\"form-control\" name=\"numero\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"department.id\">\n                    <Translate contentKey=\"sicoApp.cliente.department\">Department</Translate>\n                  </Label>\n                  <AvInput id=\"cliente-department\" type=\"select\" className=\"form-control\" name=\"department.id\">\n                    <option value=\"\" key=\"0\" />\n                    {departments\n                      ? departments.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.departmentName}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"telefonoLabel\" for=\"telefono\">\n                    <Translate contentKey=\"sicoApp.cliente.telefono\">Telefono</Translate>\n                  </Label>\n                  <AvField id=\"cliente-telefono\" type=\"text\" name=\"telefono\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"mailLabel\" for=\"mail\">\n                    <Translate contentKey=\"sicoApp.cliente.mail\">Mail</Translate>\n                  </Label>\n                  <AvField id=\"cliente-mail\" type=\"text\" name=\"mail\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"sexoLabel\">\n                    <Translate contentKey=\"sicoApp.cliente.sexo\">Sexo</Translate>\n                  </Label>\n                  <AvInput\n                    id=\"cliente-sexo\"\n                    type=\"select\"\n                    className=\"form-control\"\n                    name=\"sexo\"\n                    value={(!isNew && clienteEntity.sexo) || 'MASCULINO'}\n                  >\n                    <option value=\"MASCULINO\">\n                      <Translate contentKey=\"sicoApp.SEXO.MASCULINO\" />\n                    </option>\n                    <option value=\"FEMENINO\">\n                      <Translate contentKey=\"sicoApp.SEXO.FEMENINO\" />\n                    </option>\n                  </AvInput>\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"salaryLabel\" for=\"nroCbu\">\n                    <Translate contentKey=\"sicoApp.cliente.nroCbu\">Nro CBU</Translate>\n                  </Label>\n                  <AvField id=\"cliente-nroCbu\" type=\"string\" className=\"form-control\" name=\"nroCbu\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"salaryLabel\" for=\"salary\">\n                    <Translate contentKey=\"sicoApp.cliente.numeroCuenta\">Numero Cuenta</Translate>\n                  </Label>\n                  <AvField id=\"cliente-numeroCuenta\" type=\"string\" className=\"form-control\" name=\"numeroCuenta\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"salaryLabel\" for=\"salary\">\n                    <Translate contentKey=\"sicoApp.cliente.salary\">Salary</Translate>\n                  </Label>\n                  <AvField id=\"cliente-salary\" type=\"string\" className=\"form-control\" name=\"salary\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"scoringCreditLabel\" for=\"scoringCredit\">\n                    <Translate contentKey=\"sicoApp.cliente.scoringCredit\">Scoring Credit</Translate>\n                  </Label>\n                  <AvField id=\"cliente-scoringCredit\" type=\"string\" className=\"form-control\" name=\"scoringCredit\" />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"banco.id\">\n                    <Translate contentKey=\"sicoApp.cliente.banco\">Banco</Translate>\n                  </Label>\n                  <AvInput id=\"cliente-banco\" type=\"select\" className=\"form-control\" name=\"banco.id\">\n                    <option value=\"\" key=\"0\" />\n                    {bancos\n                      ? bancos.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.bancoName}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <Button tag={Link} id=\"cancel-save\" to=\"/entity/cliente\" replace color=\"info\">\n                  <FontAwesomeIcon icon=\"arrow-left\" />\n                  &nbsp;\n                  <span className=\"d-none d-md-inline\">\n                    <Translate contentKey=\"entity.action.back\">Back</Translate>\n                  </span>\n                </Button>\n                &nbsp;\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\n                  <FontAwesomeIcon icon=\"save\" />\n                  &nbsp;\n                  <Translate contentKey=\"entity.action.save\">Save</Translate>\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  departments: storeState.department.entities,\n  bancos: storeState.banco.entities,\n  clienteEntity: storeState.cliente.entity,\n  loading: storeState.cliente.loading,\n  updating: storeState.cliente.updating,\n  updateSuccess: storeState.cliente.updateSuccess\n});\n\nconst mapDispatchToProps = {\n  getDepartments,\n  getBancos,\n  getEntity,\n  updateEntity,\n  createEntity,\n  reset\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ClienteUpdate);\n"]}]}