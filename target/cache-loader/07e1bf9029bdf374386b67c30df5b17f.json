{"remainingRequest":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js??ref--4-3!E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx","dependencies":[{"path":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx","mtime":1555002494738},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555002618200},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Col, Row, Button } from 'reactstrap';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Translate, translate, getUrlParameter } from 'react-jhipster';\r\nimport { handlePasswordResetFinish, reset } from '../password-reset.reducer';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nvar PasswordResetFinishPage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PasswordResetFinishPage, _super);\r\n    function PasswordResetFinishPage() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            password: '',\r\n            key: getUrlParameter('key', _this.props.location.search)\r\n        };\r\n        _this.handleValidSubmit = function (event, values) {\r\n            _this.props.handlePasswordResetFinish(_this.state.key, values.newPassword);\r\n        };\r\n        _this.updatePassword = function (event) {\r\n            _this.setState({ password: event.target.value });\r\n        };\r\n        return _this;\r\n    }\r\n    PasswordResetFinishPage.prototype.componentWillUnmount = function () {\r\n        this.props.reset();\r\n    };\r\n    PasswordResetFinishPage.prototype.getResetForm = function () {\r\n        return (React.createElement(AvForm, { onValidSubmit: this.handleValidSubmit },\r\n            React.createElement(AvField, { name: \"newPassword\", label: translate('global.form.newpassword'), placeholder: translate('global.form.newpassword.placeholder'), type: \"password\", validate: {\r\n                    required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\r\n                    minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\r\n                    maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\r\n                }, onChange: this.updatePassword }),\r\n            React.createElement(PasswordStrengthBar, { password: this.state.password }),\r\n            React.createElement(AvField, { name: \"confirmPassword\", label: translate('global.form.confirmpassword'), placeholder: translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\r\n                    required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\r\n                    minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\r\n                    maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\r\n                    match: { value: 'newPassword', errorMessage: translate('global.messages.error.dontmatch') }\r\n                } }),\r\n            React.createElement(Button, { color: \"success\", type: \"submit\" },\r\n                React.createElement(Translate, { contentKey: \"reset.finish.form.button\" }, \"Validate new password\"))));\r\n    };\r\n    PasswordResetFinishPage.prototype.render = function () {\r\n        var key = this.state.key;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"4\" },\r\n                    React.createElement(\"h1\", null,\r\n                        React.createElement(Translate, { contentKey: \"reset.finish.title\" }, \"Reset password\")),\r\n                    React.createElement(\"div\", null, key ? this.getResetForm() : null)))));\r\n    };\r\n    return PasswordResetFinishPage;\r\n}(React.Component));\r\nexport { PasswordResetFinishPage };\r\nvar mapDispatchToProps = { handlePasswordResetFinish: handlePasswordResetFinish, reset: reset };\r\nexport default connect(null, mapDispatchToProps)(PasswordResetFinishPage);\r\n",{"version":3,"file":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx","sourceRoot":"","sources":["E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Alert, Col, Row, Button } from 'reactstrap';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Translate, translate, getUrlParameter } from 'react-jhipster';\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { handlePasswordResetFinish, reset } from '../password-reset.reducer';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\n\nexport interface IPasswordResetFinishProps extends DispatchProps, RouteComponentProps<{ key: string }> {}\n\nexport interface IPasswordResetFinishState {\n  password: string;\n  key: string;\n}\n\nexport class PasswordResetFinishPage extends React.Component<IPasswordResetFinishProps, IPasswordResetFinishState> {\n  state: IPasswordResetFinishState = {\n    password: '',\n    key: getUrlParameter('key', this.props.location.search)\n  };\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    this.props.handlePasswordResetFinish(this.state.key, values.newPassword);\n  };\n\n  updatePassword = event => {\n    this.setState({ password: event.target.value });\n  };\n\n  getResetForm() {\n    return (\n      <AvForm onValidSubmit={this.handleValidSubmit}>\n        <AvField\n          name=\"newPassword\"\n          label={translate('global.form.newpassword')}\n          placeholder={translate('global.form.newpassword.placeholder')}\n          type=\"password\"\n          validate={{\n            required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n            minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n            maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n          }}\n          onChange={this.updatePassword}\n        />\n        <PasswordStrengthBar password={this.state.password} />\n        <AvField\n          name=\"confirmPassword\"\n          label={translate('global.form.confirmpassword')}\n          placeholder={translate('global.form.confirmpassword.placeholder')}\n          type=\"password\"\n          validate={{\n            required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\n            minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\n            maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\n            match: { value: 'newPassword', errorMessage: translate('global.messages.error.dontmatch') }\n          }}\n        />\n        <Button color=\"success\" type=\"submit\">\n          <Translate contentKey=\"reset.finish.form.button\">Validate new password</Translate>\n        </Button>\n      </AvForm>\n    );\n  }\n\n  render() {\n    const { key } = this.state;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"4\">\n            <h1>\n              <Translate contentKey=\"reset.finish.title\">Reset password</Translate>\n            </h1>\n            <div>{key ? this.getResetForm() : null}</div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = { handlePasswordResetFinish, reset };\n\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(PasswordResetFinishPage);\n"]}]}