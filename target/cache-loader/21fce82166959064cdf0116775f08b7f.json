{"remainingRequest":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js??ref--4-3!E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\login\\login-modal.tsx","dependencies":[{"path":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\login\\login-modal.tsx","mtime":1572008206974},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555002618200},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Label, Alert, Row, Col } from 'reactstrap';\r\nimport { AvForm, AvField, AvGroup, AvInput } from 'availity-reactstrap-validation';\r\nimport { Link } from 'react-router-dom';\r\nvar LoginModal = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LoginModal, _super);\r\n    function LoginModal() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.handleSubmit = function (event, errors, _a) {\r\n            var username = _a.username, password = _a.password, rememberMe = _a.rememberMe;\r\n            var handleLogin = _this.props.handleLogin;\r\n            handleLogin(username, password, rememberMe);\r\n        };\r\n        return _this;\r\n    }\r\n    /*\r\n      handleSubmitFacebook = (email, id, name, pictureurl) => {\r\n        const { handleLoginFacebook } = this.props;\r\n        handleLoginFacebook(email, id, name, pictureurl);\r\n      };\r\n    \r\n      handleSubmitGoogle = (email, id, name, pictureurl) => {\r\n        const { handleLoginGoogle } = this.props;\r\n        handleLoginGoogle(email, id, name, pictureurl);\r\n      };*/\r\n    LoginModal.prototype.render = function () {\r\n        var _a = this.props, loginError = _a.loginError, handleClose = _a.handleClose;\r\n        return (React.createElement(Modal, { isOpen: this.props.showModal, toggle: handleClose, backdrop: \"static\", id: \"login-page\", autoFocus: false },\r\n            React.createElement(AvForm, { onSubmit: this.handleSubmit },\r\n                React.createElement(ModalHeader, { id: \"login-title\", toggle: handleClose },\r\n                    React.createElement(Translate, { contentKey: \"login.title\" }, \"Sign in\")),\r\n                React.createElement(ModalBody, null,\r\n                    React.createElement(Row, null,\r\n                        React.createElement(Col, { md: \"12\" }, loginError ? (React.createElement(Alert, { color: \"danger\" },\r\n                            React.createElement(Translate, { contentKey: \"login.messages.error.authentication\" },\r\n                                React.createElement(\"strong\", null, \"Failed to sign in!\"),\r\n                                \" Please check your credentials and try again.\"))) : null),\r\n                        React.createElement(Col, { md: \"12\" },\r\n                            React.createElement(AvField, { name: \"username\", label: translate('global.form.username'), placeholder: translate('global.form.username.placeholder'), required: true, errorMessage: \"Username cannot be empty!\", autoFocus: true }),\r\n                            React.createElement(AvField, { name: \"password\", type: \"password\", label: translate('login.form.password'), placeholder: translate('login.form.password.placeholder'), required: true, errorMessage: \"Password cannot be empty!\" }),\r\n                            React.createElement(AvGroup, { check: true, inline: true },\r\n                                React.createElement(Label, { className: \"form-check-label\" },\r\n                                    React.createElement(AvInput, { type: \"checkbox\", name: \"rememberMe\" }),\r\n                                    \" \",\r\n                                    React.createElement(Translate, { contentKey: \"login.form.rememberme\" }, \"Remember me\"))))),\r\n                    React.createElement(\"div\", { className: \"mt-1\" }, \"\\u00A0\"),\r\n                    React.createElement(Alert, { color: \"warning\" },\r\n                        React.createElement(Link, { to: \"/reset/request\" },\r\n                            React.createElement(Translate, { contentKey: \"login.password.forgot\" }, \"Did you forget your password?\"))),\r\n                    React.createElement(Alert, { color: \"warning\" },\r\n                        React.createElement(\"span\", null,\r\n                            React.createElement(Translate, { contentKey: \"global.messages.info.register.noaccount\" }, \"You don't have an account yet?\")),\r\n                        ' ',\r\n                        React.createElement(Link, { to: \"/register\" },\r\n                            React.createElement(Translate, { contentKey: \"global.messages.info.register.link\" }, \"Register a new account\")))),\r\n                React.createElement(ModalFooter, null,\r\n                    React.createElement(Button, { color: \"secondary\", onClick: handleClose, tabIndex: \"1\" },\r\n                        React.createElement(Translate, { contentKey: \"entity.action.cancel\" }, \"Cancel\")),\r\n                    ' ',\r\n                    React.createElement(Button, { color: \"primary\", type: \"submit\" },\r\n                        React.createElement(Translate, { contentKey: \"login.form.button\" }, \"Sign in\"))))));\r\n    };\r\n    return LoginModal;\r\n}(React.Component));\r\nexport default LoginModal;\r\n",{"version":3,"file":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\login\\login-modal.tsx","sourceRoot":"","sources":["E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\login\\login-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Label, Alert, Row, Col } from 'reactstrap';\nimport { AvForm, AvField, AvGroup, AvInput } from 'availity-reactstrap-validation';\nimport { Link } from 'react-router-dom';\n\nexport interface ILoginModalProps {\n  showModal: boolean;\n  loginError: boolean;\n  handleLogin: Function;\n  handleClose: Function;\n}\n\nclass LoginModal extends React.Component<ILoginModalProps> {\n  handleSubmit = (event, errors, { username, password, rememberMe }) => {\n    const { handleLogin } = this.props;\n    handleLogin(username, password, rememberMe);\n  };\n/*\n  handleSubmitFacebook = (email, id, name, pictureurl) => {\n    const { handleLoginFacebook } = this.props;\n    handleLoginFacebook(email, id, name, pictureurl);\n  };\n\n  handleSubmitGoogle = (email, id, name, pictureurl) => {\n    const { handleLoginGoogle } = this.props;\n    handleLoginGoogle(email, id, name, pictureurl);\n  };*/\n\n  render() {\n    const { loginError, handleClose } = this.props;\n\n    return (\n      <Modal isOpen={this.props.showModal} toggle={handleClose} backdrop=\"static\" id=\"login-page\" autoFocus={false}>\n        <AvForm onSubmit={this.handleSubmit}>\n          <ModalHeader id=\"login-title\" toggle={handleClose}>\n            <Translate contentKey=\"login.title\">Sign in</Translate>\n          </ModalHeader>\n          <ModalBody>\n            <Row>\n              <Col md=\"12\">\n                {loginError ? (\n                  <Alert color=\"danger\">\n                    <Translate contentKey=\"login.messages.error.authentication\">\n                      <strong>Failed to sign in!</strong> Please check your credentials and try again.\n                    </Translate>\n                  </Alert>\n                ) : null}\n              </Col>\n              <Col md=\"12\">\n                <AvField\n                  name=\"username\"\n                  label={translate('global.form.username')}\n                  placeholder={translate('global.form.username.placeholder')}\n                  required\n                  errorMessage=\"Username cannot be empty!\"\n                  autoFocus\n                />\n                <AvField\n                  name=\"password\"\n                  type=\"password\"\n                  label={translate('login.form.password')}\n                  placeholder={translate('login.form.password.placeholder')}\n                  required\n                  errorMessage=\"Password cannot be empty!\"\n                />\n                <AvGroup check inline>\n                  <Label className=\"form-check-label\">\n                    <AvInput type=\"checkbox\" name=\"rememberMe\" /> <Translate contentKey=\"login.form.rememberme\">Remember me</Translate>\n                  </Label>\n                </AvGroup>\n              </Col>\n             {/* <Col md=\"12\">\n                <AvGroup>\n                  <div className=\"mt-1\">\n                    &nbsp;\n                    <Facebook showModal={false} loginError={loginError} actionLogin={this.handleSubmitFacebook} handleClose={handleClose} />\n                  </div>\n\n                  <div className=\"mt-1\">\n                    &nbsp;\n                    <GLogin showModal={false} loginError={loginError} handleClose={handleClose} actionLogin={this.handleSubmitGoogle} />\n                  </div>\n                </AvGroup>\n              </Col>*/}\n            </Row>\n            <div className=\"mt-1\">&nbsp;</div>\n            <Alert color=\"warning\">\n              <Link to=\"/reset/request\">\n                <Translate contentKey=\"login.password.forgot\">Did you forget your password?</Translate>\n              </Link>\n            </Alert>\n            <Alert color=\"warning\">\n              <span>\n                <Translate contentKey=\"global.messages.info.register.noaccount\">You don't have an account yet?</Translate>\n              </span>{' '}\n              <Link to=\"/register\">\n                <Translate contentKey=\"global.messages.info.register.link\">Register a new account</Translate>\n              </Link>\n            </Alert>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={handleClose} tabIndex=\"1\">\n              <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n            </Button>{' '}\n            <Button color=\"primary\" type=\"submit\">\n              <Translate contentKey=\"login.form.button\">Sign in</Translate>\n            </Button>\n          </ModalFooter>\n        </AvForm>\n      </Modal>\n    );\n  }\n}\n\nexport default LoginModal;\n"]}]}