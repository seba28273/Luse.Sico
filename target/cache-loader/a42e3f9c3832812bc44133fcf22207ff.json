{"remainingRequest":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js??ref--4-2!E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\entities\\country\\country.reducer.ts","dependencies":[{"path":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\entities\\country\\country.reducer.ts","mtime":1555009071280},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555002618200},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["var _this = this;\r\nimport * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\nimport { cleanEntity } from 'app/shared/util/entity-utils';\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\nimport { defaultValue } from 'app/shared/model/country.model';\r\nexport var ACTION_TYPES = {\r\n    FETCH_COUNTRY_LIST: 'country/FETCH_COUNTRY_LIST',\r\n    FETCH_COUNTRY: 'country/FETCH_COUNTRY',\r\n    CREATE_COUNTRY: 'country/CREATE_COUNTRY',\r\n    UPDATE_COUNTRY: 'country/UPDATE_COUNTRY',\r\n    DELETE_COUNTRY: 'country/DELETE_COUNTRY',\r\n    RESET: 'country/RESET'\r\n};\r\nvar initialState = {\r\n    loading: false,\r\n    errorMessage: null,\r\n    entities: [],\r\n    entity: defaultValue,\r\n    updating: false,\r\n    updateSuccess: false\r\n};\r\n// Reducer\r\nexport default (function (state, action) {\r\n    if (state === void 0) { state = initialState; }\r\n    switch (action.type) {\r\n        case REQUEST(ACTION_TYPES.FETCH_COUNTRY_LIST):\r\n        case REQUEST(ACTION_TYPES.FETCH_COUNTRY):\r\n            return tslib_1.__assign({}, state, { errorMessage: null, updateSuccess: false, loading: true });\r\n        case REQUEST(ACTION_TYPES.CREATE_COUNTRY):\r\n        case REQUEST(ACTION_TYPES.UPDATE_COUNTRY):\r\n        case REQUEST(ACTION_TYPES.DELETE_COUNTRY):\r\n            return tslib_1.__assign({}, state, { errorMessage: null, updateSuccess: false, updating: true });\r\n        case FAILURE(ACTION_TYPES.FETCH_COUNTRY_LIST):\r\n        case FAILURE(ACTION_TYPES.FETCH_COUNTRY):\r\n        case FAILURE(ACTION_TYPES.CREATE_COUNTRY):\r\n        case FAILURE(ACTION_TYPES.UPDATE_COUNTRY):\r\n        case FAILURE(ACTION_TYPES.DELETE_COUNTRY):\r\n            return tslib_1.__assign({}, state, { loading: false, updating: false, updateSuccess: false, errorMessage: action.payload });\r\n        case SUCCESS(ACTION_TYPES.FETCH_COUNTRY_LIST):\r\n            return tslib_1.__assign({}, state, { loading: false, entities: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.FETCH_COUNTRY):\r\n            return tslib_1.__assign({}, state, { loading: false, entity: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.CREATE_COUNTRY):\r\n        case SUCCESS(ACTION_TYPES.UPDATE_COUNTRY):\r\n            return tslib_1.__assign({}, state, { updating: false, updateSuccess: true, entity: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.DELETE_COUNTRY):\r\n            return tslib_1.__assign({}, state, { updating: false, updateSuccess: true, entity: {} });\r\n        case ACTION_TYPES.RESET:\r\n            return tslib_1.__assign({}, initialState);\r\n        default:\r\n            return state;\r\n    }\r\n});\r\nvar apiUrl = 'api/countries';\r\n// Actions\r\nexport var getEntities = function (page, size, sort) { return ({\r\n    type: ACTION_TYPES.FETCH_COUNTRY_LIST,\r\n    payload: axios.get(apiUrl + \"?cacheBuster=\" + new Date().getTime())\r\n}); };\r\nexport var getEntity = function (id) {\r\n    var requestUrl = apiUrl + \"/\" + id;\r\n    return {\r\n        type: ACTION_TYPES.FETCH_COUNTRY,\r\n        payload: axios.get(requestUrl)\r\n    };\r\n};\r\nexport var createEntity = function (entity) { return function (dispatch) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    var result;\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0: return [4 /*yield*/, dispatch({\r\n                    type: ACTION_TYPES.CREATE_COUNTRY,\r\n                    payload: axios.post(apiUrl, cleanEntity(entity))\r\n                })];\r\n            case 1:\r\n                result = _a.sent();\r\n                dispatch(getEntities());\r\n                return [2 /*return*/, result];\r\n        }\r\n    });\r\n}); }; };\r\nexport var updateEntity = function (entity) { return function (dispatch) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    var result;\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0: return [4 /*yield*/, dispatch({\r\n                    type: ACTION_TYPES.UPDATE_COUNTRY,\r\n                    payload: axios.put(apiUrl, cleanEntity(entity))\r\n                })];\r\n            case 1:\r\n                result = _a.sent();\r\n                dispatch(getEntities());\r\n                return [2 /*return*/, result];\r\n        }\r\n    });\r\n}); }; };\r\nexport var deleteEntity = function (id) { return function (dispatch) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    var requestUrl, result;\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                requestUrl = apiUrl + \"/\" + id;\r\n                return [4 /*yield*/, dispatch({\r\n                        type: ACTION_TYPES.DELETE_COUNTRY,\r\n                        payload: axios.delete(requestUrl)\r\n                    })];\r\n            case 1:\r\n                result = _a.sent();\r\n                dispatch(getEntities());\r\n                return [2 /*return*/, result];\r\n        }\r\n    });\r\n}); }; };\r\nexport var reset = function () { return ({\r\n    type: ACTION_TYPES.RESET\r\n}); };\r\n",{"version":3,"file":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\entities\\country\\country.reducer.ts","sourceRoot":"","sources":["E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\entities\\country\\country.reducer.ts"],"names":[],"mappings":"AAAA,iBAiJA;;AAjJA,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,sCAAsC,CAAC;AAEjF,OAAO,EAAY,YAAY,EAAE,MAAM,gCAAgC,CAAC;AAExE,MAAM,CAAC,IAAM,YAAY,GAAG;IAC1B,kBAAkB,EAAE,4BAA4B;IAChD,aAAa,EAAE,uBAAuB;IACtC,cAAc,EAAE,wBAAwB;IACxC,cAAc,EAAE,wBAAwB;IACxC,cAAc,EAAE,wBAAwB;IACxC,KAAK,EAAE,eAAe;CACvB,CAAC;AAEF,IAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,YAAY,EAAE,IAAI;IAClB,QAAQ,EAAE,EAA6B;IACvC,MAAM,EAAE,YAAY;IACpB,QAAQ,EAAE,KAAK;IACf,aAAa,EAAE,KAAK;CACrB,CAAC;AAIF,UAAU;AAEV,gBAAe,UAAC,KAAkC,EAAE,MAAM;IAA1C,sBAAA,EAAA,oBAAkC;IAChD,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;QAC9C,KAAK,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC;YACtC,4BACK,KAAK,IACR,YAAY,EAAE,IAAI,EAClB,aAAa,EAAE,KAAK,EACpB,OAAO,EAAE,IAAI,IACb;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,4BACK,KAAK,IACR,YAAY,EAAE,IAAI,EAClB,aAAa,EAAE,KAAK,EACpB,QAAQ,EAAE,IAAI,IACd;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;QAC9C,KAAK,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QACzC,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,4BACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,QAAQ,EAAE,KAAK,EACf,aAAa,EAAE,KAAK,EACpB,YAAY,EAAE,MAAM,CAAC,OAAO,IAC5B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC;YAC3C,4BACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,IAC7B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC;YACtC,4BACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,IAC3B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,4BACK,KAAK,IACR,QAAQ,EAAE,KAAK,EACf,aAAa,EAAE,IAAI,EACnB,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,IAC3B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,4BACK,KAAK,IACR,QAAQ,EAAE,KAAK,EACf,aAAa,EAAE,IAAI,EACnB,MAAM,EAAE,EAAE,IACV;QACJ,KAAK,YAAY,CAAC,KAAK;YACrB,4BACK,YAAY,EACf;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,EAAC;AAEF,IAAM,MAAM,GAAG,eAAe,CAAC;AAE/B,UAAU;AAEV,MAAM,CAAC,IAAM,WAAW,GAAgC,UAAC,IAAI,EAAE,IAAI,EAAE,IAAI,IAAK,OAAA,CAAC;IAC7E,IAAI,EAAE,YAAY,CAAC,kBAAkB;IACrC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAc,MAAM,qBAAgB,IAAI,IAAI,EAAE,CAAC,OAAO,EAAI,CAAC;CAC9E,CAAC,EAH4E,CAG5E,CAAC;AAEH,MAAM,CAAC,IAAM,SAAS,GAA6B,UAAA,EAAE;IACnD,IAAM,UAAU,GAAM,MAAM,SAAI,EAAI,CAAC;IACrC,OAAO;QACL,IAAI,EAAE,YAAY,CAAC,aAAa;QAChC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAW,UAAU,CAAC;KACzC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,YAAY,GAA6B,UAAA,MAAM,IAAI,OAAA,UAAM,QAAQ;;;;oBAC7D,qBAAM,QAAQ,CAAC;oBAC5B,IAAI,EAAE,YAAY,CAAC,cAAc;oBACjC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;iBACjD,CAAC,EAAA;;gBAHI,MAAM,GAAG,SAGb;gBACF,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;gBACxB,sBAAO,MAAM,EAAC;;;KACf,EAP+D,CAO/D,CAAC;AAEF,MAAM,CAAC,IAAM,YAAY,GAA6B,UAAA,MAAM,IAAI,OAAA,UAAM,QAAQ;;;;oBAC7D,qBAAM,QAAQ,CAAC;oBAC5B,IAAI,EAAE,YAAY,CAAC,cAAc;oBACjC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;iBAChD,CAAC,EAAA;;gBAHI,MAAM,GAAG,SAGb;gBACF,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;gBACxB,sBAAO,MAAM,EAAC;;;KACf,EAP+D,CAO/D,CAAC;AAEF,MAAM,CAAC,IAAM,YAAY,GAAgC,UAAA,EAAE,IAAI,OAAA,UAAM,QAAQ;;;;;gBACrE,UAAU,GAAM,MAAM,SAAI,EAAI,CAAC;gBACtB,qBAAM,QAAQ,CAAC;wBAC5B,IAAI,EAAE,YAAY,CAAC,cAAc;wBACjC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC;qBAClC,CAAC,EAAA;;gBAHI,MAAM,GAAG,SAGb;gBACF,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;gBACxB,sBAAO,MAAM,EAAC;;;KACf,EAR8D,CAQ9D,CAAC;AAEF,MAAM,CAAC,IAAM,KAAK,GAAG,cAAM,OAAA,CAAC;IAC1B,IAAI,EAAE,YAAY,CAAC,KAAK;CACzB,CAAC,EAFyB,CAEzB,CAAC","sourcesContent":["import axios from 'axios';\nimport { ICrudGetAction, ICrudGetAllAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\n\nimport { cleanEntity } from 'app/shared/util/entity-utils';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\n\nimport { ICountry, defaultValue } from 'app/shared/model/country.model';\n\nexport const ACTION_TYPES = {\n  FETCH_COUNTRY_LIST: 'country/FETCH_COUNTRY_LIST',\n  FETCH_COUNTRY: 'country/FETCH_COUNTRY',\n  CREATE_COUNTRY: 'country/CREATE_COUNTRY',\n  UPDATE_COUNTRY: 'country/UPDATE_COUNTRY',\n  DELETE_COUNTRY: 'country/DELETE_COUNTRY',\n  RESET: 'country/RESET'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  entities: [] as ReadonlyArray<ICountry>,\n  entity: defaultValue,\n  updating: false,\n  updateSuccess: false\n};\n\nexport type CountryState = Readonly<typeof initialState>;\n\n// Reducer\n\nexport default (state: CountryState = initialState, action): CountryState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_COUNTRY_LIST):\n    case REQUEST(ACTION_TYPES.FETCH_COUNTRY):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.CREATE_COUNTRY):\n    case REQUEST(ACTION_TYPES.UPDATE_COUNTRY):\n    case REQUEST(ACTION_TYPES.DELETE_COUNTRY):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        updating: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_COUNTRY_LIST):\n    case FAILURE(ACTION_TYPES.FETCH_COUNTRY):\n    case FAILURE(ACTION_TYPES.CREATE_COUNTRY):\n    case FAILURE(ACTION_TYPES.UPDATE_COUNTRY):\n    case FAILURE(ACTION_TYPES.DELETE_COUNTRY):\n      return {\n        ...state,\n        loading: false,\n        updating: false,\n        updateSuccess: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_COUNTRY_LIST):\n      return {\n        ...state,\n        loading: false,\n        entities: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_COUNTRY):\n      return {\n        ...state,\n        loading: false,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.CREATE_COUNTRY):\n    case SUCCESS(ACTION_TYPES.UPDATE_COUNTRY):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.DELETE_COUNTRY):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: {}\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...initialState\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = 'api/countries';\n\n// Actions\n\nexport const getEntities: ICrudGetAllAction<ICountry> = (page, size, sort) => ({\n  type: ACTION_TYPES.FETCH_COUNTRY_LIST,\n  payload: axios.get<ICountry>(`${apiUrl}?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntity: ICrudGetAction<ICountry> = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.FETCH_COUNTRY,\n    payload: axios.get<ICountry>(requestUrl)\n  };\n};\n\nexport const createEntity: ICrudPutAction<ICountry> = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.CREATE_COUNTRY,\n    payload: axios.post(apiUrl, cleanEntity(entity))\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const updateEntity: ICrudPutAction<ICountry> = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.UPDATE_COUNTRY,\n    payload: axios.put(apiUrl, cleanEntity(entity))\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const deleteEntity: ICrudDeleteAction<ICountry> = id => async dispatch => {\n  const requestUrl = `${apiUrl}/${id}`;\n  const result = await dispatch({\n    type: ACTION_TYPES.DELETE_COUNTRY,\n    payload: axios.delete(requestUrl)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n});\n"]}]}