{"remainingRequest":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js??ref--4-2!E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\config\\axios-interceptor.ts","dependencies":[{"path":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\config\\axios-interceptor.ts","mtime":1555002492838},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555002618200},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import axios from 'axios';\r\nimport { Storage } from 'react-jhipster';\r\nimport { SERVER_API_URL } from 'app/config/constants';\r\nvar TIMEOUT = 1 * 60 * 1000;\r\naxios.defaults.timeout = TIMEOUT;\r\naxios.defaults.baseURL = SERVER_API_URL;\r\nvar setupAxiosInterceptors = function (onUnauthenticated) {\r\n    var onRequestSuccess = function (config) {\r\n        var token = Storage.local.get('jhi-authenticationToken') || Storage.session.get('jhi-authenticationToken');\r\n        if (token) {\r\n            config.headers.Authorization = \"Bearer \" + token;\r\n        }\r\n        return config;\r\n    };\r\n    var onResponseSuccess = function (response) { return response; };\r\n    var onResponseError = function (err) {\r\n        var status = err.status || err.response.status;\r\n        if (status === 403 || status === 401) {\r\n            onUnauthenticated();\r\n        }\r\n        return Promise.reject(err);\r\n    };\r\n    axios.interceptors.request.use(onRequestSuccess);\r\n    axios.interceptors.response.use(onResponseSuccess, onResponseError);\r\n};\r\nexport default setupAxiosInterceptors;\r\n",{"version":3,"file":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\config\\axios-interceptor.ts","sourceRoot":"","sources":["E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\config\\axios-interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAe,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAEtD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAEtD,IAAM,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;AAC9B,KAAK,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;AACjC,KAAK,CAAC,QAAQ,CAAC,OAAO,GAAG,cAAc,CAAC;AAExC,IAAM,sBAAsB,GAAG,UAAA,iBAAiB;IAC9C,IAAM,gBAAgB,GAAG,UAAA,MAAM;QAC7B,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,yBAAyB,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QAC7G,IAAI,KAAK,EAAE;YACT,MAAM,CAAC,OAAO,CAAC,aAAa,GAAG,YAAU,KAAO,CAAC;SAClD;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;IACF,IAAM,iBAAiB,GAAG,UAAA,QAAQ,IAAI,OAAA,QAAQ,EAAR,CAAQ,CAAC;IAC/C,IAAM,eAAe,GAAG,UAAA,GAAG;QACzB,IAAM,MAAM,GAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC;QACjD,IAAI,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,EAAE;YACpC,iBAAiB,EAAE,CAAC;SACrB;QACD,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;IACF,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IACjD,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;AACtE,CAAC,CAAC;AAEF,eAAe,sBAAsB,CAAC","sourcesContent":["import axios from 'axios';\nimport { getBasePath, Storage } from 'react-jhipster';\n\nimport { SERVER_API_URL } from 'app/config/constants';\n\nconst TIMEOUT = 1 * 60 * 1000;\naxios.defaults.timeout = TIMEOUT;\naxios.defaults.baseURL = SERVER_API_URL;\n\nconst setupAxiosInterceptors = onUnauthenticated => {\n  const onRequestSuccess = config => {\n    const token = Storage.local.get('jhi-authenticationToken') || Storage.session.get('jhi-authenticationToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  };\n  const onResponseSuccess = response => response;\n  const onResponseError = err => {\n    const status = err.status || err.response.status;\n    if (status === 403 || status === 401) {\n      onUnauthenticated();\n    }\n    return Promise.reject(err);\n  };\n  axios.interceptors.request.use(onRequestSuccess);\n  axios.interceptors.response.use(onResponseSuccess, onResponseError);\n};\n\nexport default setupAxiosInterceptors;\n"]}]}