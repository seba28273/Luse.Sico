{"remainingRequest":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js??ref--4-3!E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx","dependencies":[{"path":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx","mtime":1565633408249},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555002618200},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Row, Col, Button } from 'reactstrap';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { handleRegister, reset } from './register.reducer';\r\nvar RegisterPage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RegisterPage, _super);\r\n    function RegisterPage() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            password: ''\r\n        };\r\n        _this.handleValidSubmit = function (event, values) {\r\n            _this.props.handleRegister(values.username, values.email, values.firstPassword, _this.props.currentLocale, values.firstName, values.lastName);\r\n            event.preventDefault();\r\n        };\r\n        _this.updatePassword = function (event) {\r\n            _this.setState({ password: event.target.value });\r\n        };\r\n        return _this;\r\n    }\r\n    RegisterPage.prototype.componentWillUnmount = function () {\r\n        this.props.reset();\r\n    };\r\n    RegisterPage.prototype.render = function () {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h1\", { id: \"register-title\" },\r\n                        React.createElement(Translate, { contentKey: \"register.title\" }, \"Registration\")))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(AvForm, { id: \"register-form\", onValidSubmit: this.handleValidSubmit },\r\n                        React.createElement(AvField, { name: \"firstName\", label: translate('global.form.name'), placeholder: translate('global.form.name.placeholder'), type: \"text\", validate: {\r\n                                required: { value: true, errorMessage: translate('global.messages.validate.user.required') }\r\n                            } }),\r\n                        React.createElement(AvField, { name: \"lastName\", label: translate('global.form.lastname'), placeholder: translate('global.form.lastname.placeholder'), type: \"text\", validate: {\r\n                                required: { value: true, errorMessage: translate('global.messages.validate.user.required') }\r\n                            } }),\r\n                        React.createElement(AvField, { name: \"email\", label: translate('global.form.email'), placeholder: translate('global.form.email.placeholder'), type: \"email\", validate: {\r\n                                required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\r\n                                minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\r\n                                maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\r\n                            } }),\r\n                        React.createElement(AvField, { name: \"username\", label: translate('global.form.username'), placeholder: translate('global.form.username.placeholder'), validate: {\r\n                                required: { value: true, errorMessage: translate('register.messages.validate.login.required') },\r\n                                pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: translate('register.messages.validate.login.pattern') },\r\n                                minLength: { value: 8, errorMessage: translate('register.messages.validate.login.minlength') },\r\n                                maxLength: { value: 50, errorMessage: translate('register.messages.validate.login.maxlength') }\r\n                            } }),\r\n                        React.createElement(AvField, { name: \"firstPassword\", label: translate('global.form.newpassword'), placeholder: translate('global.form.newpassword.placeholder'), type: \"password\", onChange: this.updatePassword, validate: {\r\n                                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\r\n                                minLength: { value: 8, errorMessage: translate('global.messages.validate.newpassword.minlength') },\r\n                                maxLength: { value: 10, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\r\n                            } }),\r\n                        React.createElement(PasswordStrengthBar, { password: this.state.password }),\r\n                        React.createElement(AvField, { name: \"secondPassword\", label: translate('global.form.confirmpassword'), placeholder: translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\r\n                                required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\r\n                                minLength: { value: 8, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\r\n                                maxLength: { value: 10, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\r\n                                match: { value: 'firstPassword', errorMessage: translate('global.messages.error.dontmatch') }\r\n                            } }),\r\n                        React.createElement(Button, { id: \"register-submit\", color: \"primary\", type: \"submit\" },\r\n                            React.createElement(Translate, { contentKey: \"register.form.button\" }, \"Register\"))),\r\n                    React.createElement(\"p\", null, \"\\u00A0\")))));\r\n    };\r\n    return RegisterPage;\r\n}(React.Component));\r\nexport { RegisterPage };\r\nvar mapStateToProps = function (_a) {\r\n    var locale = _a.locale;\r\n    return ({\r\n        currentLocale: locale.currentLocale\r\n    });\r\n};\r\nvar mapDispatchToProps = { handleRegister: handleRegister, reset: reset };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPage);\r\n",{"version":3,"file":"E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx","sourceRoot":"","sources":["E:\\Proyectos\\JHipster\\sico\\node_modules\\tslint-loader\\index.js!E:\\Proyectos\\JHipster\\sico\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,gCAAgC,CAAC;AACjE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAS,MAAM,EAAE,MAAM,YAAY,CAAC;AAErD,OAAO,mBAAmB,MAAM,kDAAkD,CAAC;AAEnF,OAAO,EAAE,cAAc,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAQ3D;IAAkC,wCAA+C;IAAjF;QAAA,qEAgIC;QA/HC,WAAK,GAAmB;YACtB,QAAQ,EAAE,EAAE;SACb,CAAC;QAMF,uBAAiB,GAAG,UAAC,KAAK,EAAE,MAAM;YAChC,KAAI,CAAC,KAAK,CAAC,cAAc,CACvB,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,KAAK,EACZ,MAAM,CAAC,aAAa,EACpB,KAAI,CAAC,KAAK,CAAC,aAAa,EACxB,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,QAAQ,CAChB,CAAC;YACF,KAAK,CAAC,cAAc,EAAE,CAAC;QACzB,CAAC,CAAC;QAEF,oBAAc,GAAG,UAAA,KAAK;YACpB,KAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC;;IAyGJ,CAAC;IA3HC,2CAAoB,GAApB;QACE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAkBD,6BAAM,GAAN;QACE,OAAO,CACL;YACE,oBAAC,GAAG,IAAC,SAAS,EAAC,wBAAwB;gBACrC,oBAAC,GAAG,IAAC,EAAE,EAAC,GAAG;oBACT,4BAAI,EAAE,EAAC,gBAAgB;wBACrB,oBAAC,SAAS,IAAC,UAAU,EAAC,gBAAgB,mBAAyB,CAC5D,CACD,CACF;YACN,oBAAC,GAAG,IAAC,SAAS,EAAC,wBAAwB;gBACrC,oBAAC,GAAG,IAAC,EAAE,EAAC,GAAG;oBACT,oBAAC,MAAM,IAAC,EAAE,EAAC,eAAe,EAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB;wBAC9D,oBAAC,OAAO,IACN,IAAI,EAAC,WAAW,EAChB,KAAK,EAAE,SAAS,CAAC,kBAAkB,CAAC,EACpC,WAAW,EAAE,SAAS,CAAC,8BAA8B,CAAC,EACtD,IAAI,EAAC,MAAM,EACX,QAAQ,EAAE;gCACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,wCAAwC,CAAC,EAAE;6BAC7F,GACD;wBACF,oBAAC,OAAO,IACN,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,SAAS,CAAC,sBAAsB,CAAC,EACxC,WAAW,EAAE,SAAS,CAAC,kCAAkC,CAAC,EAC1D,IAAI,EAAC,MAAM,EACX,QAAQ,EAAE;gCACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,wCAAwC,CAAC,EAAE;6BAC7F,GACD;wBACF,oBAAC,OAAO,IACN,IAAI,EAAC,OAAO,EACZ,KAAK,EAAE,SAAS,CAAC,mBAAmB,CAAC,EACrC,WAAW,EAAE,SAAS,CAAC,+BAA+B,CAAC,EACvD,IAAI,EAAC,OAAO,EACZ,QAAQ,EAAE;gCACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,yCAAyC,CAAC,EAAE;gCAC7F,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,0CAA0C,CAAC,EAAE;gCAC5F,SAAS,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,CAAC,0CAA0C,CAAC,EAAE;6BAC/F,GACD;wBACF,oBAAC,OAAO,IACN,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,SAAS,CAAC,sBAAsB,CAAC,EACxC,WAAW,EAAE,SAAS,CAAC,kCAAkC,CAAC,EAC1D,QAAQ,EAAE;gCACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,2CAA2C,CAAC,EAAE;gCAC/F,OAAO,EAAE,EAAE,KAAK,EAAE,oBAAoB,EAAE,YAAY,EAAE,SAAS,CAAC,0CAA0C,CAAC,EAAE;gCAC7G,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,4CAA4C,CAAC,EAAE;gCAC9F,SAAS,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,SAAS,CAAC,4CAA4C,CAAC,EAAE;6BAChG,GACD;wBACF,oBAAC,OAAO,IACN,IAAI,EAAC,eAAe,EACpB,KAAK,EAAE,SAAS,CAAC,yBAAyB,CAAC,EAC3C,WAAW,EAAE,SAAS,CAAC,qCAAqC,CAAC,EAC7D,IAAI,EAAC,UAAU,EACf,QAAQ,EAAE,IAAI,CAAC,cAAc,EAC7B,QAAQ,EAAE;gCACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,+CAA+C,CAAC,EAAE;gCACnG,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,gDAAgD,CAAC,EAAE;gCAClG,SAAS,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,SAAS,CAAC,gDAAgD,CAAC,EAAE;6BACpG,GACD;wBACF,oBAAC,mBAAmB,IAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAI;wBACtD,oBAAC,OAAO,IACN,IAAI,EAAC,gBAAgB,EACrB,KAAK,EAAE,SAAS,CAAC,6BAA6B,CAAC,EAC/C,WAAW,EAAE,SAAS,CAAC,yCAAyC,CAAC,EACjE,IAAI,EAAC,UAAU,EACf,QAAQ,EAAE;gCACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,mDAAmD,CAAC,EAAE;gCACvG,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,oDAAoD,CAAC,EAAE;gCACtG,SAAS,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,SAAS,CAAC,oDAAoD,CAAC,EAAE;gCACvG,KAAK,EAAE,EAAE,KAAK,EAAE,eAAe,EAAE,YAAY,EAAE,SAAS,CAAC,iCAAiC,CAAC,EAAE;6BAC9F,GACD;wBACF,oBAAC,MAAM,IAAC,EAAE,EAAC,iBAAiB,EAAC,KAAK,EAAC,SAAS,EAAC,IAAI,EAAC,QAAQ;4BACxD,oBAAC,SAAS,IAAC,UAAU,EAAC,sBAAsB,eAAqB,CAC1D,CACF;oBACT,wCAAa,CAgBT,CACF,CACF,CACP,CAAC;IACJ,CAAC;IACH,mBAAC;AAAD,CAAC,AAhID,CAAkC,KAAK,CAAC,SAAS,GAgIhD;;AAED,IAAM,eAAe,GAAG,UAAC,EAAsB;QAApB,kBAAM;IAAmB,OAAA,CAAC;QACnD,aAAa,EAAE,MAAM,CAAC,aAAa;KACpC,CAAC;AAFkD,CAElD,CAAC;AAEH,IAAM,kBAAkB,GAAG,EAAE,cAAc,gBAAA,EAAE,KAAK,OAAA,EAAE,CAAC;AAIrD,eAAe,OAAO,CACpB,eAAe,EACf,kBAAkB,CACnB,CAAC,YAAY,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Alert, Button } from 'reactstrap';\n\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { IRootState } from 'app/shared/reducers';\nimport { handleRegister, reset } from './register.reducer';\n\nexport interface IRegisterProps extends StateProps, DispatchProps {}\n\nexport interface IRegisterState {\n  password: string;\n}\n\nexport class RegisterPage extends React.Component<IRegisterProps, IRegisterState> {\n  state: IRegisterState = {\n    password: ''\n  };\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    this.props.handleRegister(\n      values.username,\n      values.email,\n      values.firstPassword,\n      this.props.currentLocale,\n      values.firstName,\n      values.lastName\n    );\n    event.preventDefault();\n  };\n\n  updatePassword = event => {\n    this.setState({ password: event.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h1 id=\"register-title\">\n              <Translate contentKey=\"register.title\">Registration</Translate>\n            </h1>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <AvForm id=\"register-form\" onValidSubmit={this.handleValidSubmit}>\n              <AvField\n                name=\"firstName\"\n                label={translate('global.form.name')}\n                placeholder={translate('global.form.name.placeholder')}\n                type=\"text\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.user.required') }\n                }}\n              />\n              <AvField\n                name=\"lastName\"\n                label={translate('global.form.lastname')}\n                placeholder={translate('global.form.lastname.placeholder')}\n                type=\"text\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.user.required') }\n                }}\n              />\n              <AvField\n                name=\"email\"\n                label={translate('global.form.email')}\n                placeholder={translate('global.form.email.placeholder')}\n                type=\"email\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                  minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                  maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n                }}\n              />\n              <AvField\n                name=\"username\"\n                label={translate('global.form.username')}\n                placeholder={translate('global.form.username.placeholder')}\n                validate={{\n                  required: { value: true, errorMessage: translate('register.messages.validate.login.required') },\n                  pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: translate('register.messages.validate.login.pattern') },\n                  minLength: { value: 8, errorMessage: translate('register.messages.validate.login.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('register.messages.validate.login.maxlength') }\n                }}\n              />\n              <AvField\n                name=\"firstPassword\"\n                label={translate('global.form.newpassword')}\n                placeholder={translate('global.form.newpassword.placeholder')}\n                type=\"password\"\n                onChange={this.updatePassword}\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                  minLength: { value: 8, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                  maxLength: { value: 10, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n                }}\n              />\n              <PasswordStrengthBar password={this.state.password} />\n              <AvField\n                name=\"secondPassword\"\n                label={translate('global.form.confirmpassword')}\n                placeholder={translate('global.form.confirmpassword.placeholder')}\n                type=\"password\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\n                  minLength: { value: 8, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\n                  maxLength: { value: 10, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\n                  match: { value: 'firstPassword', errorMessage: translate('global.messages.error.dontmatch') }\n                }}\n              />\n              <Button id=\"register-submit\" color=\"primary\" type=\"submit\">\n                <Translate contentKey=\"register.form.button\">Register</Translate>\n              </Button>\n            </AvForm>\n            <p>&nbsp;</p>\n            {/* <Alert color=\"warning\">\n              <span>\n                <Translate contentKey=\"global.messages.info.authenticated.prefix\">If you want to </Translate>\n              </span>\n              <a className=\"alert-link\">\n                <Translate contentKey=\"global.messages.info.authenticated.link\"> sign in</Translate>\n              </a>\n              <span>\n                <Translate contentKey=\"global.messages.info.authenticated.suffix\">\n                  , you can try the default accounts:\n                  <br />- Administrator (login=\"admin\" and password=\"admin\")\n                  <br />- User (login=\"user\" and password=\"user\").\n                </Translate>\n              </span>\n            </Alert>*/}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ locale }: IRootState) => ({\n  currentLocale: locale.currentLocale\n});\n\nconst mapDispatchToProps = { handleRegister, reset };\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RegisterPage);\n"]}]}